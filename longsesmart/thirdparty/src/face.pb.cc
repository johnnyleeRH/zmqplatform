// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "face.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace face {

void protobuf_ShutdownFile_face_2eproto() {
  delete FileCode::default_instance_;
  delete FileCode::_default_checkcode_;
  delete Attribute::default_instance_;
  delete Point::default_instance_;
  delete Landmarks::default_instance_;
  delete BBox::default_instance_;
  delete Target::default_instance_;
  delete Result::default_instance_;
  delete FlowEvent::default_instance_;
  delete FlowEventBucket::default_instance_;
  delete FlowEventStats::default_instance_;
  delete Feature::default_instance_;
  delete Face::default_instance_;
  delete Person::default_instance_;
  delete Capture::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_face_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_face_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_face_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FileCode::_default_checkcode_ =
      new ::std::string("f8a22cb2ea0b694692b2e41894e53cd8", 32);
  FileCode::default_instance_ = new FileCode();
  Attribute::default_instance_ = new Attribute();
  Point::default_instance_ = new Point();
  Landmarks::default_instance_ = new Landmarks();
  BBox::default_instance_ = new BBox();
  Target::default_instance_ = new Target();
  Result::default_instance_ = new Result();
  FlowEvent::default_instance_ = new FlowEvent();
  FlowEventBucket::default_instance_ = new FlowEventBucket();
  FlowEventStats::default_instance_ = new FlowEventStats();
  Feature::default_instance_ = new Feature();
  Face::default_instance_ = new Face();
  Person::default_instance_ = new Person();
  Capture::default_instance_ = new Capture();
  FileCode::default_instance_->InitAsDefaultInstance();
  Attribute::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Landmarks::default_instance_->InitAsDefaultInstance();
  BBox::default_instance_->InitAsDefaultInstance();
  Target::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  FlowEvent::default_instance_->InitAsDefaultInstance();
  FlowEventBucket::default_instance_->InitAsDefaultInstance();
  FlowEventStats::default_instance_->InitAsDefaultInstance();
  Feature::default_instance_->InitAsDefaultInstance();
  Face::default_instance_->InitAsDefaultInstance();
  Person::default_instance_->InitAsDefaultInstance();
  Capture::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_face_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_face_2eproto_once_);
void protobuf_AddDesc_face_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_face_2eproto_once_,
                 &protobuf_AddDesc_face_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_face_2eproto {
  StaticDescriptorInitializer_face_2eproto() {
    protobuf_AddDesc_face_2eproto();
  }
} static_descriptor_initializer_face_2eproto_;
#endif
bool HobotMediaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 11:
    case 13:
    case 33:
    case 34:
    case 35:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}


// ===================================================================

::std::string* FileCode::_default_checkcode_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileCode::kCheckCodeFieldNumber;
const int FileCode::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileCode::FileCode()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.FileCode)
}

void FileCode::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileCode::FileCode(const FileCode& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.FileCode)
}

void FileCode::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  checkcode_.UnsafeSetDefault(_default_checkcode_);
  version_ = 1;
}

FileCode::~FileCode() {
  // @@protoc_insertion_point(destructor:face.FileCode)
  SharedDtor();
}

void FileCode::SharedDtor() {
  checkcode_.DestroyNoArena(_default_checkcode_);
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FileCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileCode& FileCode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

FileCode* FileCode::default_instance_ = NULL;

FileCode* FileCode::New(::google::protobuf::Arena* arena) const {
  FileCode* n = new FileCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileCode::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FileCode)
  checkcode_.ClearToDefaultNoArena(_default_checkcode_);
  version_ = 1;
}

bool FileCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.FileCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string checkCode = 1 [default = "f8a22cb2ea0b694692b2e41894e53cd8"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checkcode().data(), this->checkcode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.FileCode.checkCode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.FileCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.FileCode)
  return false;
#undef DO_
}

void FileCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.FileCode)
  // optional string checkCode = 1 [default = "f8a22cb2ea0b694692b2e41894e53cd8"];
  if (this->checkcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checkcode().data(), this->checkcode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.FileCode.checkCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->checkcode(), output);
  }

  // optional int32 version = 2 [default = 1];
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:face.FileCode)
}

int FileCode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.FileCode)
  int total_size = 0;

  // optional string checkCode = 1 [default = "f8a22cb2ea0b694692b2e41894e53cd8"];
  if (this->checkcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checkcode());
  }

  // optional int32 version = 2 [default = 1];
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileCode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileCode*>(&from));
}

void FileCode::MergeFrom(const FileCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.FileCode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.checkcode().size() > 0) {

    checkcode_.AssignWithDefault(_default_checkcode_, from.checkcode_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void FileCode::CopyFrom(const FileCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FileCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileCode::IsInitialized() const {

  return true;
}

void FileCode::Swap(FileCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileCode::InternalSwap(FileCode* other) {
  checkcode_.Swap(&other->checkcode_);
  std::swap(version_, other->version_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileCode::GetTypeName() const {
  return "face.FileCode";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileCode

// optional string checkCode = 1 [default = "f8a22cb2ea0b694692b2e41894e53cd8"];
void FileCode::clear_checkcode() {
  checkcode_.ClearToDefaultNoArena(_default_checkcode_);
}
 const ::std::string& FileCode::checkcode() const {
  // @@protoc_insertion_point(field_get:face.FileCode.checkCode)
  return checkcode_.GetNoArena(_default_checkcode_);
}
 void FileCode::set_checkcode(const ::std::string& value) {
  
  checkcode_.SetNoArena(_default_checkcode_, value);
  // @@protoc_insertion_point(field_set:face.FileCode.checkCode)
}
 void FileCode::set_checkcode(const char* value) {
  
  checkcode_.SetNoArena(_default_checkcode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.FileCode.checkCode)
}
 void FileCode::set_checkcode(const char* value, size_t size) {
  
  checkcode_.SetNoArena(_default_checkcode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.FileCode.checkCode)
}
 ::std::string* FileCode::mutable_checkcode() {
  
  // @@protoc_insertion_point(field_mutable:face.FileCode.checkCode)
  return checkcode_.MutableNoArena(_default_checkcode_);
}
 ::std::string* FileCode::release_checkcode() {
  // @@protoc_insertion_point(field_release:face.FileCode.checkCode)
  
  return checkcode_.ReleaseNoArena(_default_checkcode_);
}
 void FileCode::set_allocated_checkcode(::std::string* checkcode) {
  if (checkcode != NULL) {
    
  } else {
    
  }
  checkcode_.SetAllocatedNoArena(_default_checkcode_, checkcode);
  // @@protoc_insertion_point(field_set_allocated:face.FileCode.checkCode)
}

// optional int32 version = 2 [default = 1];
void FileCode::clear_version() {
  version_ = 1;
}
 ::google::protobuf::int32 FileCode::version() const {
  // @@protoc_insertion_point(field_get:face.FileCode.version)
  return version_;
}
 void FileCode::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:face.FileCode.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attribute::kTypeFieldNumber;
const int Attribute::kIntValFieldNumber;
const int Attribute::kStrValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attribute::Attribute()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.Attribute)
}

void Attribute::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Attribute::Attribute(const Attribute& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.Attribute)
}

void Attribute::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  int_val_ = 0;
  str_val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:face.Attribute)
  SharedDtor();
}

void Attribute::SharedDtor() {
  str_val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Attribute& Attribute::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

Attribute* Attribute::default_instance_ = NULL;

Attribute* Attribute::New(::google::protobuf::Arena* arena) const {
  Attribute* n = new Attribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Attribute)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Attribute, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Attribute*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, int_val_);
  str_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.Attribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int_val;
        break;
      }

      // optional int32 int_val = 2;
      case 2: {
        if (tag == 16) {
         parse_int_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_val_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_str_val;
        break;
      }

      // optional string str_val = 3;
      case 3: {
        if (tag == 26) {
         parse_str_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_val()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str_val().data(), this->str_val().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Attribute.str_val"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.Attribute)
  return false;
#undef DO_
}

void Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.Attribute)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 int_val = 2;
  if (this->int_val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_val(), output);
  }

  // optional string str_val = 3;
  if (this->str_val().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_val().data(), this->str_val().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Attribute.str_val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->str_val(), output);
  }

  // @@protoc_insertion_point(serialize_end:face.Attribute)
}

int Attribute::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.Attribute)
  int total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 int_val = 2;
  if (this->int_val() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->int_val());
  }

  // optional string str_val = 3;
  if (this->str_val().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_val());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attribute::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Attribute*>(&from));
}

void Attribute::MergeFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.Attribute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.int_val() != 0) {
    set_int_val(from.int_val());
  }
  if (from.str_val().size() > 0) {

    str_val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_val_);
  }
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {

  return true;
}

void Attribute::Swap(Attribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attribute::InternalSwap(Attribute* other) {
  std::swap(type_, other->type_);
  std::swap(int_val_, other->int_val_);
  str_val_.Swap(&other->str_val_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Attribute::GetTypeName() const {
  return "face.Attribute";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attribute

// optional int32 type = 1;
void Attribute::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 Attribute::type() const {
  // @@protoc_insertion_point(field_get:face.Attribute.type)
  return type_;
}
 void Attribute::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:face.Attribute.type)
}

// optional int32 int_val = 2;
void Attribute::clear_int_val() {
  int_val_ = 0;
}
 ::google::protobuf::int32 Attribute::int_val() const {
  // @@protoc_insertion_point(field_get:face.Attribute.int_val)
  return int_val_;
}
 void Attribute::set_int_val(::google::protobuf::int32 value) {
  
  int_val_ = value;
  // @@protoc_insertion_point(field_set:face.Attribute.int_val)
}

// optional string str_val = 3;
void Attribute::clear_str_val() {
  str_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Attribute::str_val() const {
  // @@protoc_insertion_point(field_get:face.Attribute.str_val)
  return str_val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Attribute::set_str_val(const ::std::string& value) {
  
  str_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Attribute.str_val)
}
 void Attribute::set_str_val(const char* value) {
  
  str_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Attribute.str_val)
}
 void Attribute::set_str_val(const char* value, size_t size) {
  
  str_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Attribute.str_val)
}
 ::std::string* Attribute::mutable_str_val() {
  
  // @@protoc_insertion_point(field_mutable:face.Attribute.str_val)
  return str_val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Attribute::release_str_val() {
  // @@protoc_insertion_point(field_release:face.Attribute.str_val)
  
  return str_val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Attribute::set_allocated_str_val(::std::string* str_val) {
  if (str_val != NULL) {
    
  } else {
    
  }
  str_val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_val);
  // @@protoc_insertion_point(field_set_allocated:face.Attribute.str_val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.Point)
}

void Point::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point::Point(const Point& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.Point)
}

void Point::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  score_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:face.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Point& Point::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, score_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // optional float score = 3;
      case 3: {
        if (tag == 29) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.Point)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional float score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:face.Point)
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.Point)
  int total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional float score = 3;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Point*>(&from));
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(score_, other->score_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Point::GetTypeName() const {
  return "face.Point";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional int32 x = 1;
void Point::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:face.Point.x)
  return x_;
}
 void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:face.Point.x)
}

// optional int32 y = 2;
void Point::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:face.Point.y)
  return y_;
}
 void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:face.Point.y)
}

// optional float score = 3;
void Point::clear_score() {
  score_ = 0;
}
 float Point::score() const {
  // @@protoc_insertion_point(field_get:face.Point.score)
  return score_;
}
 void Point::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:face.Point.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Landmarks::kPointNumFieldNumber;
const int Landmarks::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Landmarks::Landmarks()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.Landmarks)
}

void Landmarks::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Landmarks::Landmarks(const Landmarks& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.Landmarks)
}

void Landmarks::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  point_num_ = 0;
}

Landmarks::~Landmarks() {
  // @@protoc_insertion_point(destructor:face.Landmarks)
  SharedDtor();
}

void Landmarks::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Landmarks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Landmarks& Landmarks::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

Landmarks* Landmarks::default_instance_ = NULL;

Landmarks* Landmarks::New(::google::protobuf::Arena* arena) const {
  Landmarks* n = new Landmarks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Landmarks::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Landmarks)
  point_num_ = 0;
  points_.Clear();
}

bool Landmarks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.Landmarks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 point_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_points;
        break;
      }

      // repeated .face.Point points = 2;
      case 2: {
        if (tag == 18) {
         parse_points:
          DO_(input->IncrementRecursionDepth());
         parse_loop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.Landmarks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.Landmarks)
  return false;
#undef DO_
}

void Landmarks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.Landmarks)
  // optional int32 point_num = 1;
  if (this->point_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->point_num(), output);
  }

  // repeated .face.Point points = 2;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->points(i), output);
  }

  // @@protoc_insertion_point(serialize_end:face.Landmarks)
}

int Landmarks::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.Landmarks)
  int total_size = 0;

  // optional int32 point_num = 1;
  if (this->point_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point_num());
  }

  // repeated .face.Point points = 2;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Landmarks::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Landmarks*>(&from));
}

void Landmarks::MergeFrom(const Landmarks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.Landmarks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  points_.MergeFrom(from.points_);
  if (from.point_num() != 0) {
    set_point_num(from.point_num());
  }
}

void Landmarks::CopyFrom(const Landmarks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Landmarks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmarks::IsInitialized() const {

  return true;
}

void Landmarks::Swap(Landmarks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Landmarks::InternalSwap(Landmarks* other) {
  std::swap(point_num_, other->point_num_);
  points_.UnsafeArenaSwap(&other->points_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Landmarks::GetTypeName() const {
  return "face.Landmarks";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Landmarks

// optional int32 point_num = 1;
void Landmarks::clear_point_num() {
  point_num_ = 0;
}
 ::google::protobuf::int32 Landmarks::point_num() const {
  // @@protoc_insertion_point(field_get:face.Landmarks.point_num)
  return point_num_;
}
 void Landmarks::set_point_num(::google::protobuf::int32 value) {
  
  point_num_ = value;
  // @@protoc_insertion_point(field_set:face.Landmarks.point_num)
}

// repeated .face.Point points = 2;
int Landmarks::points_size() const {
  return points_.size();
}
void Landmarks::clear_points() {
  points_.Clear();
}
const ::face::Point& Landmarks::points(int index) const {
  // @@protoc_insertion_point(field_get:face.Landmarks.points)
  return points_.Get(index);
}
::face::Point* Landmarks::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:face.Landmarks.points)
  return points_.Mutable(index);
}
::face::Point* Landmarks::add_points() {
  // @@protoc_insertion_point(field_add:face.Landmarks.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::face::Point >*
Landmarks::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:face.Landmarks.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::face::Point >&
Landmarks::points() const {
  // @@protoc_insertion_point(field_list:face.Landmarks.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBox::kTopFieldNumber;
const int BBox::kLeftFieldNumber;
const int BBox::kRightFieldNumber;
const int BBox::kBottomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBox::BBox()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.BBox)
}

void BBox::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BBox::BBox(const BBox& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.BBox)
}

void BBox::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  top_ = 0;
  left_ = 0;
  right_ = 0;
  bottom_ = 0;
}

BBox::~BBox() {
  // @@protoc_insertion_point(destructor:face.BBox)
  SharedDtor();
}

void BBox::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BBox& BBox::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

BBox* BBox::default_instance_ = NULL;

BBox* BBox::New(::google::protobuf::Arena* arena) const {
  BBox* n = new BBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBox::Clear() {
// @@protoc_insertion_point(message_clear_start:face.BBox)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BBox, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BBox*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(top_, bottom_);

#undef ZR_HELPER_
#undef ZR_

}

bool BBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.BBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 top = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_left;
        break;
      }

      // optional int32 left = 2;
      case 2: {
        if (tag == 16) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_right;
        break;
      }

      // optional int32 right = 3;
      case 3: {
        if (tag == 24) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }

      // optional int32 bottom = 4;
      case 4: {
        if (tag == 32) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.BBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.BBox)
  return false;
#undef DO_
}

void BBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.BBox)
  // optional int32 top = 1;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->top(), output);
  }

  // optional int32 left = 2;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left(), output);
  }

  // optional int32 right = 3;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // optional int32 bottom = 4;
  if (this->bottom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottom(), output);
  }

  // @@protoc_insertion_point(serialize_end:face.BBox)
}

int BBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.BBox)
  int total_size = 0;

  // optional int32 top = 1;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // optional int32 left = 2;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // optional int32 right = 3;
  if (this->right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right());
  }

  // optional int32 bottom = 4;
  if (this->bottom() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bottom());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBox::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BBox*>(&from));
}

void BBox::MergeFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.BBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.bottom() != 0) {
    set_bottom(from.bottom());
  }
}

void BBox::CopyFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.BBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox::IsInitialized() const {

  return true;
}

void BBox::Swap(BBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBox::InternalSwap(BBox* other) {
  std::swap(top_, other->top_);
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  std::swap(bottom_, other->bottom_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BBox::GetTypeName() const {
  return "face.BBox";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBox

// optional int32 top = 1;
void BBox::clear_top() {
  top_ = 0;
}
 ::google::protobuf::int32 BBox::top() const {
  // @@protoc_insertion_point(field_get:face.BBox.top)
  return top_;
}
 void BBox::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:face.BBox.top)
}

// optional int32 left = 2;
void BBox::clear_left() {
  left_ = 0;
}
 ::google::protobuf::int32 BBox::left() const {
  // @@protoc_insertion_point(field_get:face.BBox.left)
  return left_;
}
 void BBox::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:face.BBox.left)
}

// optional int32 right = 3;
void BBox::clear_right() {
  right_ = 0;
}
 ::google::protobuf::int32 BBox::right() const {
  // @@protoc_insertion_point(field_get:face.BBox.right)
  return right_;
}
 void BBox::set_right(::google::protobuf::int32 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:face.BBox.right)
}

// optional int32 bottom = 4;
void BBox::clear_bottom() {
  bottom_ = 0;
}
 ::google::protobuf::int32 BBox::bottom() const {
  // @@protoc_insertion_point(field_get:face.BBox.bottom)
  return bottom_;
}
 void BBox::set_bottom(::google::protobuf::int32 value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:face.BBox.bottom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Target::kTypeFieldNumber;
const int Target::kIdFieldNumber;
const int Target::kBoxFieldNumber;
const int Target::kAttrsFieldNumber;
const int Target::kLmksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Target::Target()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.Target)
}

void Target::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  box_ = const_cast< ::face::BBox*>(
      ::face::BBox::internal_default_instance());
#else
  box_ = const_cast< ::face::BBox*>(&::face::BBox::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  lmks_ = const_cast< ::face::Landmarks*>(
      ::face::Landmarks::internal_default_instance());
#else
  lmks_ = const_cast< ::face::Landmarks*>(&::face::Landmarks::default_instance());
#endif
}

Target::Target(const Target& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.Target)
}

void Target::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  box_ = NULL;
  lmks_ = NULL;
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:face.Target)
  SharedDtor();
}

void Target::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete box_;
    delete lmks_;
  }
}

void Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Target& Target::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

Target* Target::default_instance_ = NULL;

Target* Target::New(::google::protobuf::Arena* arena) const {
  Target* n = new Target;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Target)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Target, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Target*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, id_);
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
  if (GetArenaNoVirtual() == NULL && lmks_ != NULL) delete lmks_;
  lmks_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  attrs_.Clear();
}

bool Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.Target)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_box;
        break;
      }

      // optional .face.BBox box = 3;
      case 3: {
        if (tag == 26) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        break;
      }

      // repeated .face.Attribute attrs = 4;
      case 4: {
        if (tag == 34) {
         parse_attrs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_attrs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_lmks;
        break;
      }

      // optional .face.Landmarks lmks = 5;
      case 5: {
        if (tag == 42) {
         parse_lmks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lmks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.Target)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.Target)
  return false;
#undef DO_
}

void Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.Target)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .face.BBox box = 3;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->box_, output);
  }

  // repeated .face.Attribute attrs = 4;
  for (unsigned int i = 0, n = this->attrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->attrs(i), output);
  }

  // optional .face.Landmarks lmks = 5;
  if (this->has_lmks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->lmks_, output);
  }

  // @@protoc_insertion_point(serialize_end:face.Target)
}

int Target::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.Target)
  int total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .face.BBox box = 3;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_);
  }

  // optional .face.Landmarks lmks = 5;
  if (this->has_lmks()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lmks_);
  }

  // repeated .face.Attribute attrs = 4;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Target::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Target*>(&from));
}

void Target::MergeFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.Target)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  attrs_.MergeFrom(from.attrs_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_box()) {
    mutable_box()->::face::BBox::MergeFrom(from.box());
  }
  if (from.has_lmks()) {
    mutable_lmks()->::face::Landmarks::MergeFrom(from.lmks());
  }
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {

  return true;
}

void Target::Swap(Target* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Target::InternalSwap(Target* other) {
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(box_, other->box_);
  attrs_.UnsafeArenaSwap(&other->attrs_);
  std::swap(lmks_, other->lmks_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Target::GetTypeName() const {
  return "face.Target";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Target

// optional int32 type = 1;
void Target::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 Target::type() const {
  // @@protoc_insertion_point(field_get:face.Target.type)
  return type_;
}
 void Target::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:face.Target.type)
}

// optional int32 id = 2;
void Target::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Target::id() const {
  // @@protoc_insertion_point(field_get:face.Target.id)
  return id_;
}
 void Target::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:face.Target.id)
}

// optional .face.BBox box = 3;
bool Target::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
void Target::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
const ::face::BBox& Target::box() const {
  // @@protoc_insertion_point(field_get:face.Target.box)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return box_ != NULL ? *box_ : *default_instance().box_;
#else
  return box_ != NULL ? *box_ : *default_instance_->box_;
#endif
}
::face::BBox* Target::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::face::BBox;
  }
  // @@protoc_insertion_point(field_mutable:face.Target.box)
  return box_;
}
::face::BBox* Target::release_box() {
  // @@protoc_insertion_point(field_release:face.Target.box)
  
  ::face::BBox* temp = box_;
  box_ = NULL;
  return temp;
}
void Target::set_allocated_box(::face::BBox* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.Target.box)
}

// repeated .face.Attribute attrs = 4;
int Target::attrs_size() const {
  return attrs_.size();
}
void Target::clear_attrs() {
  attrs_.Clear();
}
const ::face::Attribute& Target::attrs(int index) const {
  // @@protoc_insertion_point(field_get:face.Target.attrs)
  return attrs_.Get(index);
}
::face::Attribute* Target::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:face.Target.attrs)
  return attrs_.Mutable(index);
}
::face::Attribute* Target::add_attrs() {
  // @@protoc_insertion_point(field_add:face.Target.attrs)
  return attrs_.Add();
}
::google::protobuf::RepeatedPtrField< ::face::Attribute >*
Target::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:face.Target.attrs)
  return &attrs_;
}
const ::google::protobuf::RepeatedPtrField< ::face::Attribute >&
Target::attrs() const {
  // @@protoc_insertion_point(field_list:face.Target.attrs)
  return attrs_;
}

// optional .face.Landmarks lmks = 5;
bool Target::has_lmks() const {
  return !_is_default_instance_ && lmks_ != NULL;
}
void Target::clear_lmks() {
  if (GetArenaNoVirtual() == NULL && lmks_ != NULL) delete lmks_;
  lmks_ = NULL;
}
const ::face::Landmarks& Target::lmks() const {
  // @@protoc_insertion_point(field_get:face.Target.lmks)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return lmks_ != NULL ? *lmks_ : *default_instance().lmks_;
#else
  return lmks_ != NULL ? *lmks_ : *default_instance_->lmks_;
#endif
}
::face::Landmarks* Target::mutable_lmks() {
  
  if (lmks_ == NULL) {
    lmks_ = new ::face::Landmarks;
  }
  // @@protoc_insertion_point(field_mutable:face.Target.lmks)
  return lmks_;
}
::face::Landmarks* Target::release_lmks() {
  // @@protoc_insertion_point(field_release:face.Target.lmks)
  
  ::face::Landmarks* temp = lmks_;
  lmks_ = NULL;
  return temp;
}
void Target::set_allocated_lmks(::face::Landmarks* lmks) {
  delete lmks_;
  lmks_ = lmks;
  if (lmks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.Target.lmks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kTimestampFieldNumber;
const int Result::kFrameStatusFieldNumber;
const int Result::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.Result)
}

void Result::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Result::Result(const Result& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.Result)
}

void Result::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  frame_status_ = 0;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:face.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Result& Result::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Result)
  timestamp_ = GOOGLE_ULONGLONG(0);
  frame_status_ = 0;
  targets_.Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame_status;
        break;
      }

      // optional int32 frame_status = 2;
      case 2: {
        if (tag == 16) {
         parse_frame_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_targets;
        break;
      }

      // repeated .face.Target targets = 3;
      case 3: {
        if (tag == 26) {
         parse_targets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.Result)
  // optional fixed64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->timestamp(), output);
  }

  // optional int32 frame_status = 2;
  if (this->frame_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_status(), output);
  }

  // repeated .face.Target targets = 3;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->targets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:face.Result)
}

int Result::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.Result)
  int total_size = 0;

  // optional fixed64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 frame_status = 2;
  if (this->frame_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_status());
  }

  // repeated .face.Target targets = 3;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Result*>(&from));
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  targets_.MergeFrom(from.targets_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.frame_status() != 0) {
    set_frame_status(from.frame_status());
  }
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {

  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(frame_status_, other->frame_status_);
  targets_.UnsafeArenaSwap(&other->targets_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Result::GetTypeName() const {
  return "face.Result";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// optional fixed64 timestamp = 1;
void Result::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Result::timestamp() const {
  // @@protoc_insertion_point(field_get:face.Result.timestamp)
  return timestamp_;
}
 void Result::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:face.Result.timestamp)
}

// optional int32 frame_status = 2;
void Result::clear_frame_status() {
  frame_status_ = 0;
}
 ::google::protobuf::int32 Result::frame_status() const {
  // @@protoc_insertion_point(field_get:face.Result.frame_status)
  return frame_status_;
}
 void Result::set_frame_status(::google::protobuf::int32 value) {
  
  frame_status_ = value;
  // @@protoc_insertion_point(field_set:face.Result.frame_status)
}

// repeated .face.Target targets = 3;
int Result::targets_size() const {
  return targets_.size();
}
void Result::clear_targets() {
  targets_.Clear();
}
const ::face::Target& Result::targets(int index) const {
  // @@protoc_insertion_point(field_get:face.Result.targets)
  return targets_.Get(index);
}
::face::Target* Result::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:face.Result.targets)
  return targets_.Mutable(index);
}
::face::Target* Result::add_targets() {
  // @@protoc_insertion_point(field_add:face.Result.targets)
  return targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::face::Target >*
Result::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:face.Result.targets)
  return &targets_;
}
const ::google::protobuf::RepeatedPtrField< ::face::Target >&
Result::targets() const {
  // @@protoc_insertion_point(field_list:face.Result.targets)
  return targets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowEvent::kGroupIdFieldNumber;
const int FlowEvent::kExtraFieldNumber;
const int FlowEvent::kEventTimeFieldNumber;
const int FlowEvent::kSendTimeFieldNumber;
const int FlowEvent::kLineIdFieldNumber;
const int FlowEvent::kEventTypeFieldNumber;
const int FlowEvent::kMsgTypeFieldNumber;
const int FlowEvent::kAgeFieldNumber;
const int FlowEvent::kGenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowEvent::FlowEvent()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.FlowEvent)
}

void FlowEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FlowEvent::FlowEvent(const FlowEvent& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.FlowEvent)
}

void FlowEvent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_time_ = GOOGLE_LONGLONG(0);
  send_time_ = GOOGLE_LONGLONG(0);
  line_id_ = 0;
  event_type_ = 0;
  msg_type_ = 0;
  age_ = 0;
  gender_ = 0;
}

FlowEvent::~FlowEvent() {
  // @@protoc_insertion_point(destructor:face.FlowEvent)
  SharedDtor();
}

void FlowEvent::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FlowEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlowEvent& FlowEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

FlowEvent* FlowEvent::default_instance_ = NULL;

FlowEvent* FlowEvent::New(::google::protobuf::Arena* arena) const {
  FlowEvent* n = new FlowEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlowEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FlowEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FlowEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FlowEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(event_time_, age_);
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool FlowEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.FlowEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.FlowEvent.group_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extra;
        break;
      }

      // optional string extra = 2;
      case 2: {
        if (tag == 18) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extra().data(), this->extra().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.FlowEvent.extra"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event_time;
        break;
      }

      // optional int64 event_time = 3;
      case 3: {
        if (tag == 24) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_send_time;
        break;
      }

      // optional int64 send_time = 4;
      case 4: {
        if (tag == 32) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_line_id;
        break;
      }

      // optional int32 line_id = 5;
      case 5: {
        if (tag == 40) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_event_type;
        break;
      }

      // optional int32 event_type = 6;
      case 6: {
        if (tag == 48) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_msg_type;
        break;
      }

      // optional int32 msg_type = 7;
      case 7: {
        if (tag == 56) {
         parse_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_age;
        break;
      }

      // optional int32 age = 8;
      case 8: {
        if (tag == 64) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gender;
        break;
      }

      // optional int32 gender = 9;
      case 9: {
        if (tag == 72) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.FlowEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.FlowEvent)
  return false;
#undef DO_
}

void FlowEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.FlowEvent)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.FlowEvent.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // optional string extra = 2;
  if (this->extra().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra().data(), this->extra().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.FlowEvent.extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extra(), output);
  }

  // optional int64 event_time = 3;
  if (this->event_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->event_time(), output);
  }

  // optional int64 send_time = 4;
  if (this->send_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->send_time(), output);
  }

  // optional int32 line_id = 5;
  if (this->line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->line_id(), output);
  }

  // optional int32 event_type = 6;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->event_type(), output);
  }

  // optional int32 msg_type = 7;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->msg_type(), output);
  }

  // optional int32 age = 8;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->age(), output);
  }

  // optional int32 gender = 9;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gender(), output);
  }

  // @@protoc_insertion_point(serialize_end:face.FlowEvent)
}

int FlowEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.FlowEvent)
  int total_size = 0;

  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // optional string extra = 2;
  if (this->extra().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extra());
  }

  // optional int64 event_time = 3;
  if (this->event_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->event_time());
  }

  // optional int64 send_time = 4;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_time());
  }

  // optional int32 line_id = 5;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_id());
  }

  // optional int32 event_type = 6;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_type());
  }

  // optional int32 msg_type = 7;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_type());
  }

  // optional int32 age = 8;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // optional int32 gender = 9;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gender());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlowEvent*>(&from));
}

void FlowEvent::MergeFrom(const FlowEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.FlowEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.extra().size() > 0) {

    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  if (from.event_time() != 0) {
    set_event_time(from.event_time());
  }
  if (from.send_time() != 0) {
    set_send_time(from.send_time());
  }
  if (from.line_id() != 0) {
    set_line_id(from.line_id());
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
}

void FlowEvent::CopyFrom(const FlowEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FlowEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowEvent::IsInitialized() const {

  return true;
}

void FlowEvent::Swap(FlowEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowEvent::InternalSwap(FlowEvent* other) {
  group_id_.Swap(&other->group_id_);
  extra_.Swap(&other->extra_);
  std::swap(event_time_, other->event_time_);
  std::swap(send_time_, other->send_time_);
  std::swap(line_id_, other->line_id_);
  std::swap(event_type_, other->event_type_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(age_, other->age_);
  std::swap(gender_, other->gender_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlowEvent::GetTypeName() const {
  return "face.FlowEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlowEvent

// optional string group_id = 1;
void FlowEvent::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FlowEvent::group_id() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FlowEvent::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.FlowEvent.group_id)
}
 void FlowEvent::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.FlowEvent.group_id)
}
 void FlowEvent::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.FlowEvent.group_id)
}
 ::std::string* FlowEvent::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:face.FlowEvent.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FlowEvent::release_group_id() {
  // @@protoc_insertion_point(field_release:face.FlowEvent.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FlowEvent::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:face.FlowEvent.group_id)
}

// optional string extra = 2;
void FlowEvent::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FlowEvent::extra() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.extra)
  return extra_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FlowEvent::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.FlowEvent.extra)
}
 void FlowEvent::set_extra(const char* value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.FlowEvent.extra)
}
 void FlowEvent::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.FlowEvent.extra)
}
 ::std::string* FlowEvent::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:face.FlowEvent.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FlowEvent::release_extra() {
  // @@protoc_insertion_point(field_release:face.FlowEvent.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FlowEvent::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:face.FlowEvent.extra)
}

// optional int64 event_time = 3;
void FlowEvent::clear_event_time() {
  event_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FlowEvent::event_time() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.event_time)
  return event_time_;
}
 void FlowEvent::set_event_time(::google::protobuf::int64 value) {
  
  event_time_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.event_time)
}

// optional int64 send_time = 4;
void FlowEvent::clear_send_time() {
  send_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FlowEvent::send_time() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.send_time)
  return send_time_;
}
 void FlowEvent::set_send_time(::google::protobuf::int64 value) {
  
  send_time_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.send_time)
}

// optional int32 line_id = 5;
void FlowEvent::clear_line_id() {
  line_id_ = 0;
}
 ::google::protobuf::int32 FlowEvent::line_id() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.line_id)
  return line_id_;
}
 void FlowEvent::set_line_id(::google::protobuf::int32 value) {
  
  line_id_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.line_id)
}

// optional int32 event_type = 6;
void FlowEvent::clear_event_type() {
  event_type_ = 0;
}
 ::google::protobuf::int32 FlowEvent::event_type() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.event_type)
  return event_type_;
}
 void FlowEvent::set_event_type(::google::protobuf::int32 value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.event_type)
}

// optional int32 msg_type = 7;
void FlowEvent::clear_msg_type() {
  msg_type_ = 0;
}
 ::google::protobuf::int32 FlowEvent::msg_type() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.msg_type)
  return msg_type_;
}
 void FlowEvent::set_msg_type(::google::protobuf::int32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.msg_type)
}

// optional int32 age = 8;
void FlowEvent::clear_age() {
  age_ = 0;
}
 ::google::protobuf::int32 FlowEvent::age() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.age)
  return age_;
}
 void FlowEvent::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.age)
}

// optional int32 gender = 9;
void FlowEvent::clear_gender() {
  gender_ = 0;
}
 ::google::protobuf::int32 FlowEvent::gender() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.gender)
  return gender_;
}
 void FlowEvent::set_gender(::google::protobuf::int32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.gender)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowEventBucket::kNum06FieldNumber;
const int FlowEventBucket::kNum712FieldNumber;
const int FlowEventBucket::kNum1318FieldNumber;
const int FlowEventBucket::kNum1928FieldNumber;
const int FlowEventBucket::kNum2935FieldNumber;
const int FlowEventBucket::kNum3645FieldNumber;
const int FlowEventBucket::kNum4655FieldNumber;
const int FlowEventBucket::kNumGt55FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowEventBucket::FlowEventBucket()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.FlowEventBucket)
}

void FlowEventBucket::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FlowEventBucket::FlowEventBucket(const FlowEventBucket& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.FlowEventBucket)
}

void FlowEventBucket::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_0_6_ = 0;
  num_7_12_ = 0;
  num_13_18_ = 0;
  num_19_28_ = 0;
  num_29_35_ = 0;
  num_36_45_ = 0;
  num_46_55_ = 0;
  num_gt_55_ = 0;
}

FlowEventBucket::~FlowEventBucket() {
  // @@protoc_insertion_point(destructor:face.FlowEventBucket)
  SharedDtor();
}

void FlowEventBucket::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FlowEventBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlowEventBucket& FlowEventBucket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

FlowEventBucket* FlowEventBucket::default_instance_ = NULL;

FlowEventBucket* FlowEventBucket::New(::google::protobuf::Arena* arena) const {
  FlowEventBucket* n = new FlowEventBucket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlowEventBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FlowEventBucket)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FlowEventBucket, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FlowEventBucket*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_0_6_, num_gt_55_);

#undef ZR_HELPER_
#undef ZR_

}

bool FlowEventBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.FlowEventBucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_0_6 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_0_6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_7_12;
        break;
      }

      // optional int32 num_7_12 = 2;
      case 2: {
        if (tag == 16) {
         parse_num_7_12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_7_12_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_13_18;
        break;
      }

      // optional int32 num_13_18 = 3;
      case 3: {
        if (tag == 24) {
         parse_num_13_18:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_13_18_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_19_28;
        break;
      }

      // optional int32 num_19_28 = 4;
      case 4: {
        if (tag == 32) {
         parse_num_19_28:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_19_28_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_29_35;
        break;
      }

      // optional int32 num_29_35 = 5;
      case 5: {
        if (tag == 40) {
         parse_num_29_35:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_29_35_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_36_45;
        break;
      }

      // optional int32 num_36_45 = 6;
      case 6: {
        if (tag == 48) {
         parse_num_36_45:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_36_45_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_46_55;
        break;
      }

      // optional int32 num_46_55 = 7;
      case 7: {
        if (tag == 56) {
         parse_num_46_55:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_46_55_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_gt_55;
        break;
      }

      // optional int32 num_gt_55 = 8;
      case 8: {
        if (tag == 64) {
         parse_num_gt_55:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_gt_55_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.FlowEventBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.FlowEventBucket)
  return false;
#undef DO_
}

void FlowEventBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.FlowEventBucket)
  // optional int32 num_0_6 = 1;
  if (this->num_0_6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_0_6(), output);
  }

  // optional int32 num_7_12 = 2;
  if (this->num_7_12() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_7_12(), output);
  }

  // optional int32 num_13_18 = 3;
  if (this->num_13_18() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_13_18(), output);
  }

  // optional int32 num_19_28 = 4;
  if (this->num_19_28() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_19_28(), output);
  }

  // optional int32 num_29_35 = 5;
  if (this->num_29_35() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_29_35(), output);
  }

  // optional int32 num_36_45 = 6;
  if (this->num_36_45() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_36_45(), output);
  }

  // optional int32 num_46_55 = 7;
  if (this->num_46_55() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_46_55(), output);
  }

  // optional int32 num_gt_55 = 8;
  if (this->num_gt_55() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_gt_55(), output);
  }

  // @@protoc_insertion_point(serialize_end:face.FlowEventBucket)
}

int FlowEventBucket::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.FlowEventBucket)
  int total_size = 0;

  // optional int32 num_0_6 = 1;
  if (this->num_0_6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_0_6());
  }

  // optional int32 num_7_12 = 2;
  if (this->num_7_12() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_7_12());
  }

  // optional int32 num_13_18 = 3;
  if (this->num_13_18() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_13_18());
  }

  // optional int32 num_19_28 = 4;
  if (this->num_19_28() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_19_28());
  }

  // optional int32 num_29_35 = 5;
  if (this->num_29_35() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_29_35());
  }

  // optional int32 num_36_45 = 6;
  if (this->num_36_45() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_36_45());
  }

  // optional int32 num_46_55 = 7;
  if (this->num_46_55() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_46_55());
  }

  // optional int32 num_gt_55 = 8;
  if (this->num_gt_55() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_gt_55());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowEventBucket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlowEventBucket*>(&from));
}

void FlowEventBucket::MergeFrom(const FlowEventBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.FlowEventBucket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num_0_6() != 0) {
    set_num_0_6(from.num_0_6());
  }
  if (from.num_7_12() != 0) {
    set_num_7_12(from.num_7_12());
  }
  if (from.num_13_18() != 0) {
    set_num_13_18(from.num_13_18());
  }
  if (from.num_19_28() != 0) {
    set_num_19_28(from.num_19_28());
  }
  if (from.num_29_35() != 0) {
    set_num_29_35(from.num_29_35());
  }
  if (from.num_36_45() != 0) {
    set_num_36_45(from.num_36_45());
  }
  if (from.num_46_55() != 0) {
    set_num_46_55(from.num_46_55());
  }
  if (from.num_gt_55() != 0) {
    set_num_gt_55(from.num_gt_55());
  }
}

void FlowEventBucket::CopyFrom(const FlowEventBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FlowEventBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowEventBucket::IsInitialized() const {

  return true;
}

void FlowEventBucket::Swap(FlowEventBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowEventBucket::InternalSwap(FlowEventBucket* other) {
  std::swap(num_0_6_, other->num_0_6_);
  std::swap(num_7_12_, other->num_7_12_);
  std::swap(num_13_18_, other->num_13_18_);
  std::swap(num_19_28_, other->num_19_28_);
  std::swap(num_29_35_, other->num_29_35_);
  std::swap(num_36_45_, other->num_36_45_);
  std::swap(num_46_55_, other->num_46_55_);
  std::swap(num_gt_55_, other->num_gt_55_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlowEventBucket::GetTypeName() const {
  return "face.FlowEventBucket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlowEventBucket

// optional int32 num_0_6 = 1;
void FlowEventBucket::clear_num_0_6() {
  num_0_6_ = 0;
}
 ::google::protobuf::int32 FlowEventBucket::num_0_6() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_0_6)
  return num_0_6_;
}
 void FlowEventBucket::set_num_0_6(::google::protobuf::int32 value) {
  
  num_0_6_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_0_6)
}

// optional int32 num_7_12 = 2;
void FlowEventBucket::clear_num_7_12() {
  num_7_12_ = 0;
}
 ::google::protobuf::int32 FlowEventBucket::num_7_12() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_7_12)
  return num_7_12_;
}
 void FlowEventBucket::set_num_7_12(::google::protobuf::int32 value) {
  
  num_7_12_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_7_12)
}

// optional int32 num_13_18 = 3;
void FlowEventBucket::clear_num_13_18() {
  num_13_18_ = 0;
}
 ::google::protobuf::int32 FlowEventBucket::num_13_18() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_13_18)
  return num_13_18_;
}
 void FlowEventBucket::set_num_13_18(::google::protobuf::int32 value) {
  
  num_13_18_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_13_18)
}

// optional int32 num_19_28 = 4;
void FlowEventBucket::clear_num_19_28() {
  num_19_28_ = 0;
}
 ::google::protobuf::int32 FlowEventBucket::num_19_28() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_19_28)
  return num_19_28_;
}
 void FlowEventBucket::set_num_19_28(::google::protobuf::int32 value) {
  
  num_19_28_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_19_28)
}

// optional int32 num_29_35 = 5;
void FlowEventBucket::clear_num_29_35() {
  num_29_35_ = 0;
}
 ::google::protobuf::int32 FlowEventBucket::num_29_35() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_29_35)
  return num_29_35_;
}
 void FlowEventBucket::set_num_29_35(::google::protobuf::int32 value) {
  
  num_29_35_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_29_35)
}

// optional int32 num_36_45 = 6;
void FlowEventBucket::clear_num_36_45() {
  num_36_45_ = 0;
}
 ::google::protobuf::int32 FlowEventBucket::num_36_45() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_36_45)
  return num_36_45_;
}
 void FlowEventBucket::set_num_36_45(::google::protobuf::int32 value) {
  
  num_36_45_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_36_45)
}

// optional int32 num_46_55 = 7;
void FlowEventBucket::clear_num_46_55() {
  num_46_55_ = 0;
}
 ::google::protobuf::int32 FlowEventBucket::num_46_55() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_46_55)
  return num_46_55_;
}
 void FlowEventBucket::set_num_46_55(::google::protobuf::int32 value) {
  
  num_46_55_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_46_55)
}

// optional int32 num_gt_55 = 8;
void FlowEventBucket::clear_num_gt_55() {
  num_gt_55_ = 0;
}
 ::google::protobuf::int32 FlowEventBucket::num_gt_55() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_gt_55)
  return num_gt_55_;
}
 void FlowEventBucket::set_num_gt_55(::google::protobuf::int32 value) {
  
  num_gt_55_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_gt_55)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowEventStats::kGroupIdFieldNumber;
const int FlowEventStats::kPersonTotalFieldNumber;
const int FlowEventStats::kTimestampFieldNumber;
const int FlowEventStats::kIntervalFieldNumber;
const int FlowEventStats::kFrontNumFieldNumber;
const int FlowEventStats::kInNumFieldNumber;
const int FlowEventStats::kInFemaleNumFieldNumber;
const int FlowEventStats::kInMaleNumFieldNumber;
const int FlowEventStats::kOutNumFieldNumber;
const int FlowEventStats::kOutFemaleNumFieldNumber;
const int FlowEventStats::kOutMaleNumFieldNumber;
const int FlowEventStats::kInMaleBucketFieldNumber;
const int FlowEventStats::kInFemaleBucketFieldNumber;
const int FlowEventStats::kOutMaleBucketFieldNumber;
const int FlowEventStats::kOutFemaleBucketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowEventStats::FlowEventStats()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.FlowEventStats)
}

void FlowEventStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  in_male_bucket_ = const_cast< ::face::FlowEventBucket*>(
      ::face::FlowEventBucket::internal_default_instance());
#else
  in_male_bucket_ = const_cast< ::face::FlowEventBucket*>(&::face::FlowEventBucket::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  in_female_bucket_ = const_cast< ::face::FlowEventBucket*>(
      ::face::FlowEventBucket::internal_default_instance());
#else
  in_female_bucket_ = const_cast< ::face::FlowEventBucket*>(&::face::FlowEventBucket::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  out_male_bucket_ = const_cast< ::face::FlowEventBucket*>(
      ::face::FlowEventBucket::internal_default_instance());
#else
  out_male_bucket_ = const_cast< ::face::FlowEventBucket*>(&::face::FlowEventBucket::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  out_female_bucket_ = const_cast< ::face::FlowEventBucket*>(
      ::face::FlowEventBucket::internal_default_instance());
#else
  out_female_bucket_ = const_cast< ::face::FlowEventBucket*>(&::face::FlowEventBucket::default_instance());
#endif
}

FlowEventStats::FlowEventStats(const FlowEventStats& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.FlowEventStats)
}

void FlowEventStats::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  person_total_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  interval_ = GOOGLE_LONGLONG(0);
  front_num_ = 0;
  in_num_ = 0;
  in_female_num_ = 0;
  in_male_num_ = 0;
  out_num_ = 0;
  out_female_num_ = 0;
  out_male_num_ = 0;
  in_male_bucket_ = NULL;
  in_female_bucket_ = NULL;
  out_male_bucket_ = NULL;
  out_female_bucket_ = NULL;
}

FlowEventStats::~FlowEventStats() {
  // @@protoc_insertion_point(destructor:face.FlowEventStats)
  SharedDtor();
}

void FlowEventStats::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete in_male_bucket_;
    delete in_female_bucket_;
    delete out_male_bucket_;
    delete out_female_bucket_;
  }
}

void FlowEventStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlowEventStats& FlowEventStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

FlowEventStats* FlowEventStats::default_instance_ = NULL;

FlowEventStats* FlowEventStats::New(::google::protobuf::Arena* arena) const {
  FlowEventStats* n = new FlowEventStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlowEventStats::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FlowEventStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FlowEventStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FlowEventStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, in_male_num_);
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(out_num_, out_male_num_);
  if (GetArenaNoVirtual() == NULL && in_male_bucket_ != NULL) delete in_male_bucket_;
  in_male_bucket_ = NULL;
  if (GetArenaNoVirtual() == NULL && in_female_bucket_ != NULL) delete in_female_bucket_;
  in_female_bucket_ = NULL;
  if (GetArenaNoVirtual() == NULL && out_male_bucket_ != NULL) delete out_male_bucket_;
  out_male_bucket_ = NULL;
  if (GetArenaNoVirtual() == NULL && out_female_bucket_ != NULL) delete out_female_bucket_;
  out_female_bucket_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool FlowEventStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.FlowEventStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.FlowEventStats.group_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_person_total;
        break;
      }

      // optional int32 person_total = 2;
      case 2: {
        if (tag == 16) {
         parse_person_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &person_total_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_interval;
        break;
      }

      // optional int64 interval = 4;
      case 4: {
        if (tag == 32) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_front_num;
        break;
      }

      // optional int32 front_num = 5;
      case 5: {
        if (tag == 40) {
         parse_front_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_in_num;
        break;
      }

      // optional int32 in_num = 6;
      case 6: {
        if (tag == 48) {
         parse_in_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_in_female_num;
        break;
      }

      // optional int32 in_female_num = 7;
      case 7: {
        if (tag == 56) {
         parse_in_female_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_female_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_in_male_num;
        break;
      }

      // optional int32 in_male_num = 8;
      case 8: {
        if (tag == 64) {
         parse_in_male_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_male_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_out_num;
        break;
      }

      // optional int32 out_num = 9;
      case 9: {
        if (tag == 72) {
         parse_out_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_out_female_num;
        break;
      }

      // optional int32 out_female_num = 10;
      case 10: {
        if (tag == 80) {
         parse_out_female_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_female_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_out_male_num;
        break;
      }

      // optional int32 out_male_num = 11;
      case 11: {
        if (tag == 88) {
         parse_out_male_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_male_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_in_male_bucket;
        break;
      }

      // optional .face.FlowEventBucket in_male_bucket = 12;
      case 12: {
        if (tag == 98) {
         parse_in_male_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in_male_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_in_female_bucket;
        break;
      }

      // optional .face.FlowEventBucket in_female_bucket = 13;
      case 13: {
        if (tag == 106) {
         parse_in_female_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in_female_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_out_male_bucket;
        break;
      }

      // optional .face.FlowEventBucket out_male_bucket = 14;
      case 14: {
        if (tag == 114) {
         parse_out_male_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_out_male_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_out_female_bucket;
        break;
      }

      // optional .face.FlowEventBucket out_female_bucket = 15;
      case 15: {
        if (tag == 122) {
         parse_out_female_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_out_female_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.FlowEventStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.FlowEventStats)
  return false;
#undef DO_
}

void FlowEventStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.FlowEventStats)
  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.FlowEventStats.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // optional int32 person_total = 2;
  if (this->person_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->person_total(), output);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional int64 interval = 4;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->interval(), output);
  }

  // optional int32 front_num = 5;
  if (this->front_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->front_num(), output);
  }

  // optional int32 in_num = 6;
  if (this->in_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->in_num(), output);
  }

  // optional int32 in_female_num = 7;
  if (this->in_female_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->in_female_num(), output);
  }

  // optional int32 in_male_num = 8;
  if (this->in_male_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->in_male_num(), output);
  }

  // optional int32 out_num = 9;
  if (this->out_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->out_num(), output);
  }

  // optional int32 out_female_num = 10;
  if (this->out_female_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->out_female_num(), output);
  }

  // optional int32 out_male_num = 11;
  if (this->out_male_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->out_male_num(), output);
  }

  // optional .face.FlowEventBucket in_male_bucket = 12;
  if (this->has_in_male_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->in_male_bucket_, output);
  }

  // optional .face.FlowEventBucket in_female_bucket = 13;
  if (this->has_in_female_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->in_female_bucket_, output);
  }

  // optional .face.FlowEventBucket out_male_bucket = 14;
  if (this->has_out_male_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->out_male_bucket_, output);
  }

  // optional .face.FlowEventBucket out_female_bucket = 15;
  if (this->has_out_female_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->out_female_bucket_, output);
  }

  // @@protoc_insertion_point(serialize_end:face.FlowEventStats)
}

int FlowEventStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.FlowEventStats)
  int total_size = 0;

  // optional string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // optional int32 person_total = 2;
  if (this->person_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->person_total());
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int64 interval = 4;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->interval());
  }

  // optional int32 front_num = 5;
  if (this->front_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_num());
  }

  // optional int32 in_num = 6;
  if (this->in_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->in_num());
  }

  // optional int32 in_female_num = 7;
  if (this->in_female_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->in_female_num());
  }

  // optional int32 in_male_num = 8;
  if (this->in_male_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->in_male_num());
  }

  // optional int32 out_num = 9;
  if (this->out_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->out_num());
  }

  // optional int32 out_female_num = 10;
  if (this->out_female_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->out_female_num());
  }

  // optional int32 out_male_num = 11;
  if (this->out_male_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->out_male_num());
  }

  // optional .face.FlowEventBucket in_male_bucket = 12;
  if (this->has_in_male_bucket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_male_bucket_);
  }

  // optional .face.FlowEventBucket in_female_bucket = 13;
  if (this->has_in_female_bucket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_female_bucket_);
  }

  // optional .face.FlowEventBucket out_male_bucket = 14;
  if (this->has_out_male_bucket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->out_male_bucket_);
  }

  // optional .face.FlowEventBucket out_female_bucket = 15;
  if (this->has_out_female_bucket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->out_female_bucket_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowEventStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlowEventStats*>(&from));
}

void FlowEventStats::MergeFrom(const FlowEventStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.FlowEventStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.group_id().size() > 0) {

    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.person_total() != 0) {
    set_person_total(from.person_total());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
  if (from.front_num() != 0) {
    set_front_num(from.front_num());
  }
  if (from.in_num() != 0) {
    set_in_num(from.in_num());
  }
  if (from.in_female_num() != 0) {
    set_in_female_num(from.in_female_num());
  }
  if (from.in_male_num() != 0) {
    set_in_male_num(from.in_male_num());
  }
  if (from.out_num() != 0) {
    set_out_num(from.out_num());
  }
  if (from.out_female_num() != 0) {
    set_out_female_num(from.out_female_num());
  }
  if (from.out_male_num() != 0) {
    set_out_male_num(from.out_male_num());
  }
  if (from.has_in_male_bucket()) {
    mutable_in_male_bucket()->::face::FlowEventBucket::MergeFrom(from.in_male_bucket());
  }
  if (from.has_in_female_bucket()) {
    mutable_in_female_bucket()->::face::FlowEventBucket::MergeFrom(from.in_female_bucket());
  }
  if (from.has_out_male_bucket()) {
    mutable_out_male_bucket()->::face::FlowEventBucket::MergeFrom(from.out_male_bucket());
  }
  if (from.has_out_female_bucket()) {
    mutable_out_female_bucket()->::face::FlowEventBucket::MergeFrom(from.out_female_bucket());
  }
}

void FlowEventStats::CopyFrom(const FlowEventStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FlowEventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowEventStats::IsInitialized() const {

  return true;
}

void FlowEventStats::Swap(FlowEventStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowEventStats::InternalSwap(FlowEventStats* other) {
  group_id_.Swap(&other->group_id_);
  std::swap(person_total_, other->person_total_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(interval_, other->interval_);
  std::swap(front_num_, other->front_num_);
  std::swap(in_num_, other->in_num_);
  std::swap(in_female_num_, other->in_female_num_);
  std::swap(in_male_num_, other->in_male_num_);
  std::swap(out_num_, other->out_num_);
  std::swap(out_female_num_, other->out_female_num_);
  std::swap(out_male_num_, other->out_male_num_);
  std::swap(in_male_bucket_, other->in_male_bucket_);
  std::swap(in_female_bucket_, other->in_female_bucket_);
  std::swap(out_male_bucket_, other->out_male_bucket_);
  std::swap(out_female_bucket_, other->out_female_bucket_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlowEventStats::GetTypeName() const {
  return "face.FlowEventStats";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlowEventStats

// optional string group_id = 1;
void FlowEventStats::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FlowEventStats::group_id() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FlowEventStats::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.FlowEventStats.group_id)
}
 void FlowEventStats::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.FlowEventStats.group_id)
}
 void FlowEventStats::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.FlowEventStats.group_id)
}
 ::std::string* FlowEventStats::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FlowEventStats::release_group_id() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FlowEventStats::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.group_id)
}

// optional int32 person_total = 2;
void FlowEventStats::clear_person_total() {
  person_total_ = 0;
}
 ::google::protobuf::int32 FlowEventStats::person_total() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.person_total)
  return person_total_;
}
 void FlowEventStats::set_person_total(::google::protobuf::int32 value) {
  
  person_total_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.person_total)
}

// optional int64 timestamp = 3;
void FlowEventStats::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FlowEventStats::timestamp() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.timestamp)
  return timestamp_;
}
 void FlowEventStats::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.timestamp)
}

// optional int64 interval = 4;
void FlowEventStats::clear_interval() {
  interval_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FlowEventStats::interval() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.interval)
  return interval_;
}
 void FlowEventStats::set_interval(::google::protobuf::int64 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.interval)
}

// optional int32 front_num = 5;
void FlowEventStats::clear_front_num() {
  front_num_ = 0;
}
 ::google::protobuf::int32 FlowEventStats::front_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.front_num)
  return front_num_;
}
 void FlowEventStats::set_front_num(::google::protobuf::int32 value) {
  
  front_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.front_num)
}

// optional int32 in_num = 6;
void FlowEventStats::clear_in_num() {
  in_num_ = 0;
}
 ::google::protobuf::int32 FlowEventStats::in_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_num)
  return in_num_;
}
 void FlowEventStats::set_in_num(::google::protobuf::int32 value) {
  
  in_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.in_num)
}

// optional int32 in_female_num = 7;
void FlowEventStats::clear_in_female_num() {
  in_female_num_ = 0;
}
 ::google::protobuf::int32 FlowEventStats::in_female_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_female_num)
  return in_female_num_;
}
 void FlowEventStats::set_in_female_num(::google::protobuf::int32 value) {
  
  in_female_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.in_female_num)
}

// optional int32 in_male_num = 8;
void FlowEventStats::clear_in_male_num() {
  in_male_num_ = 0;
}
 ::google::protobuf::int32 FlowEventStats::in_male_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_male_num)
  return in_male_num_;
}
 void FlowEventStats::set_in_male_num(::google::protobuf::int32 value) {
  
  in_male_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.in_male_num)
}

// optional int32 out_num = 9;
void FlowEventStats::clear_out_num() {
  out_num_ = 0;
}
 ::google::protobuf::int32 FlowEventStats::out_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_num)
  return out_num_;
}
 void FlowEventStats::set_out_num(::google::protobuf::int32 value) {
  
  out_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.out_num)
}

// optional int32 out_female_num = 10;
void FlowEventStats::clear_out_female_num() {
  out_female_num_ = 0;
}
 ::google::protobuf::int32 FlowEventStats::out_female_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_female_num)
  return out_female_num_;
}
 void FlowEventStats::set_out_female_num(::google::protobuf::int32 value) {
  
  out_female_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.out_female_num)
}

// optional int32 out_male_num = 11;
void FlowEventStats::clear_out_male_num() {
  out_male_num_ = 0;
}
 ::google::protobuf::int32 FlowEventStats::out_male_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_male_num)
  return out_male_num_;
}
 void FlowEventStats::set_out_male_num(::google::protobuf::int32 value) {
  
  out_male_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.out_male_num)
}

// optional .face.FlowEventBucket in_male_bucket = 12;
bool FlowEventStats::has_in_male_bucket() const {
  return !_is_default_instance_ && in_male_bucket_ != NULL;
}
void FlowEventStats::clear_in_male_bucket() {
  if (GetArenaNoVirtual() == NULL && in_male_bucket_ != NULL) delete in_male_bucket_;
  in_male_bucket_ = NULL;
}
const ::face::FlowEventBucket& FlowEventStats::in_male_bucket() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_male_bucket)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return in_male_bucket_ != NULL ? *in_male_bucket_ : *default_instance().in_male_bucket_;
#else
  return in_male_bucket_ != NULL ? *in_male_bucket_ : *default_instance_->in_male_bucket_;
#endif
}
::face::FlowEventBucket* FlowEventStats::mutable_in_male_bucket() {
  
  if (in_male_bucket_ == NULL) {
    in_male_bucket_ = new ::face::FlowEventBucket;
  }
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.in_male_bucket)
  return in_male_bucket_;
}
::face::FlowEventBucket* FlowEventStats::release_in_male_bucket() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.in_male_bucket)
  
  ::face::FlowEventBucket* temp = in_male_bucket_;
  in_male_bucket_ = NULL;
  return temp;
}
void FlowEventStats::set_allocated_in_male_bucket(::face::FlowEventBucket* in_male_bucket) {
  delete in_male_bucket_;
  in_male_bucket_ = in_male_bucket;
  if (in_male_bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.in_male_bucket)
}

// optional .face.FlowEventBucket in_female_bucket = 13;
bool FlowEventStats::has_in_female_bucket() const {
  return !_is_default_instance_ && in_female_bucket_ != NULL;
}
void FlowEventStats::clear_in_female_bucket() {
  if (GetArenaNoVirtual() == NULL && in_female_bucket_ != NULL) delete in_female_bucket_;
  in_female_bucket_ = NULL;
}
const ::face::FlowEventBucket& FlowEventStats::in_female_bucket() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_female_bucket)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return in_female_bucket_ != NULL ? *in_female_bucket_ : *default_instance().in_female_bucket_;
#else
  return in_female_bucket_ != NULL ? *in_female_bucket_ : *default_instance_->in_female_bucket_;
#endif
}
::face::FlowEventBucket* FlowEventStats::mutable_in_female_bucket() {
  
  if (in_female_bucket_ == NULL) {
    in_female_bucket_ = new ::face::FlowEventBucket;
  }
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.in_female_bucket)
  return in_female_bucket_;
}
::face::FlowEventBucket* FlowEventStats::release_in_female_bucket() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.in_female_bucket)
  
  ::face::FlowEventBucket* temp = in_female_bucket_;
  in_female_bucket_ = NULL;
  return temp;
}
void FlowEventStats::set_allocated_in_female_bucket(::face::FlowEventBucket* in_female_bucket) {
  delete in_female_bucket_;
  in_female_bucket_ = in_female_bucket;
  if (in_female_bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.in_female_bucket)
}

// optional .face.FlowEventBucket out_male_bucket = 14;
bool FlowEventStats::has_out_male_bucket() const {
  return !_is_default_instance_ && out_male_bucket_ != NULL;
}
void FlowEventStats::clear_out_male_bucket() {
  if (GetArenaNoVirtual() == NULL && out_male_bucket_ != NULL) delete out_male_bucket_;
  out_male_bucket_ = NULL;
}
const ::face::FlowEventBucket& FlowEventStats::out_male_bucket() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_male_bucket)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return out_male_bucket_ != NULL ? *out_male_bucket_ : *default_instance().out_male_bucket_;
#else
  return out_male_bucket_ != NULL ? *out_male_bucket_ : *default_instance_->out_male_bucket_;
#endif
}
::face::FlowEventBucket* FlowEventStats::mutable_out_male_bucket() {
  
  if (out_male_bucket_ == NULL) {
    out_male_bucket_ = new ::face::FlowEventBucket;
  }
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.out_male_bucket)
  return out_male_bucket_;
}
::face::FlowEventBucket* FlowEventStats::release_out_male_bucket() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.out_male_bucket)
  
  ::face::FlowEventBucket* temp = out_male_bucket_;
  out_male_bucket_ = NULL;
  return temp;
}
void FlowEventStats::set_allocated_out_male_bucket(::face::FlowEventBucket* out_male_bucket) {
  delete out_male_bucket_;
  out_male_bucket_ = out_male_bucket;
  if (out_male_bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.out_male_bucket)
}

// optional .face.FlowEventBucket out_female_bucket = 15;
bool FlowEventStats::has_out_female_bucket() const {
  return !_is_default_instance_ && out_female_bucket_ != NULL;
}
void FlowEventStats::clear_out_female_bucket() {
  if (GetArenaNoVirtual() == NULL && out_female_bucket_ != NULL) delete out_female_bucket_;
  out_female_bucket_ = NULL;
}
const ::face::FlowEventBucket& FlowEventStats::out_female_bucket() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_female_bucket)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return out_female_bucket_ != NULL ? *out_female_bucket_ : *default_instance().out_female_bucket_;
#else
  return out_female_bucket_ != NULL ? *out_female_bucket_ : *default_instance_->out_female_bucket_;
#endif
}
::face::FlowEventBucket* FlowEventStats::mutable_out_female_bucket() {
  
  if (out_female_bucket_ == NULL) {
    out_female_bucket_ = new ::face::FlowEventBucket;
  }
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.out_female_bucket)
  return out_female_bucket_;
}
::face::FlowEventBucket* FlowEventStats::release_out_female_bucket() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.out_female_bucket)
  
  ::face::FlowEventBucket* temp = out_female_bucket_;
  out_female_bucket_ = NULL;
  return temp;
}
void FlowEventStats::set_allocated_out_female_bucket(::face::FlowEventBucket* out_female_bucket) {
  delete out_female_bucket_;
  out_female_bucket_ = out_female_bucket;
  if (out_female_bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.out_female_bucket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kFeatInfoFieldNumber;
const int Feature::kMatchedIdFieldNumber;
const int Feature::kMatchedRateFieldNumber;
const int Feature::kDbIdFieldNumber;
const int Feature::kNameFieldNumber;
const int Feature::kUrlFieldNumber;
const int Feature::kMatchedImgFieldNumber;
const int Feature::kExt1FieldNumber;
const int Feature::kExt2FieldNumber;
const int Feature::kExt3FieldNumber;
const int Feature::kExt4FieldNumber;
const int Feature::kExt5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.Feature)
}

void Feature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Feature::Feature(const Feature& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.Feature)
}

void Feature::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  feat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_rate_ = 0;
  db_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:face.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  feat_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Feature& Feature::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

Feature* Feature::default_instance_ = NULL;

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  Feature* n = new Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Feature)
  feat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_rate_ = 0;
  db_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matched_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes feat_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_feat_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_matched_id;
        break;
      }

      // optional string matched_id = 2;
      case 2: {
        if (tag == 18) {
         parse_matched_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matched_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matched_id().data(), this->matched_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.matched_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_matched_rate;
        break;
      }

      // optional float matched_rate = 3;
      case 3: {
        if (tag == 29) {
         parse_matched_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &matched_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_db_id;
        break;
      }

      // optional string db_id = 4;
      case 4: {
        if (tag == 34) {
         parse_db_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_id().data(), this->db_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.db_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_url;
        break;
      }

      // optional string url = 6;
      case 6: {
        if (tag == 50) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_matched_img;
        break;
      }

      // optional string matched_img = 7;
      case 7: {
        if (tag == 58) {
         parse_matched_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matched_img()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matched_img().data(), this->matched_img().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.matched_img"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ext1;
        break;
      }

      // optional string ext1 = 8;
      case 8: {
        if (tag == 66) {
         parse_ext1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext1().data(), this->ext1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.ext1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ext2;
        break;
      }

      // optional string ext2 = 9;
      case 9: {
        if (tag == 74) {
         parse_ext2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext2().data(), this->ext2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.ext2"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ext3;
        break;
      }

      // optional string ext3 = 10;
      case 10: {
        if (tag == 82) {
         parse_ext3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext3()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext3().data(), this->ext3().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.ext3"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ext4;
        break;
      }

      // optional string ext4 = 11;
      case 11: {
        if (tag == 90) {
         parse_ext4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext4()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext4().data(), this->ext4().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.ext4"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ext5;
        break;
      }

      // optional string ext5 = 12;
      case 12: {
        if (tag == 98) {
         parse_ext5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext5().data(), this->ext5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Feature.ext5"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.Feature)
  // optional bytes feat_info = 1;
  if (this->feat_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->feat_info(), output);
  }

  // optional string matched_id = 2;
  if (this->matched_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matched_id().data(), this->matched_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.matched_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->matched_id(), output);
  }

  // optional float matched_rate = 3;
  if (this->matched_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->matched_rate(), output);
  }

  // optional string db_id = 4;
  if (this->db_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_id().data(), this->db_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.db_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->db_id(), output);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional string url = 6;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional string matched_img = 7;
  if (this->matched_img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matched_img().data(), this->matched_img().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.matched_img");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->matched_img(), output);
  }

  // optional string ext1 = 8;
  if (this->ext1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext1().data(), this->ext1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.ext1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ext1(), output);
  }

  // optional string ext2 = 9;
  if (this->ext2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext2().data(), this->ext2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.ext2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ext2(), output);
  }

  // optional string ext3 = 10;
  if (this->ext3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext3().data(), this->ext3().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.ext3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ext3(), output);
  }

  // optional string ext4 = 11;
  if (this->ext4().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext4().data(), this->ext4().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.ext4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ext4(), output);
  }

  // optional string ext5 = 12;
  if (this->ext5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext5().data(), this->ext5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Feature.ext5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ext5(), output);
  }

  // @@protoc_insertion_point(serialize_end:face.Feature)
}

int Feature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.Feature)
  int total_size = 0;

  // optional bytes feat_info = 1;
  if (this->feat_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->feat_info());
  }

  // optional string matched_id = 2;
  if (this->matched_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matched_id());
  }

  // optional float matched_rate = 3;
  if (this->matched_rate() != 0) {
    total_size += 1 + 4;
  }

  // optional string db_id = 4;
  if (this->db_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_id());
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string url = 6;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional string matched_img = 7;
  if (this->matched_img().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matched_img());
  }

  // optional string ext1 = 8;
  if (this->ext1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext1());
  }

  // optional string ext2 = 9;
  if (this->ext2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext2());
  }

  // optional string ext3 = 10;
  if (this->ext3().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext3());
  }

  // optional string ext4 = 11;
  if (this->ext4().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext4());
  }

  // optional string ext5 = 12;
  if (this->ext5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext5());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Feature*>(&from));
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.Feature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.feat_info().size() > 0) {

    feat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feat_info_);
  }
  if (from.matched_id().size() > 0) {

    matched_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matched_id_);
  }
  if (from.matched_rate() != 0) {
    set_matched_rate(from.matched_rate());
  }
  if (from.db_id().size() > 0) {

    db_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.matched_img().size() > 0) {

    matched_img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matched_img_);
  }
  if (from.ext1().size() > 0) {

    ext1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext1_);
  }
  if (from.ext2().size() > 0) {

    ext2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext2_);
  }
  if (from.ext3().size() > 0) {

    ext3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext3_);
  }
  if (from.ext4().size() > 0) {

    ext4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext4_);
  }
  if (from.ext5().size() > 0) {

    ext5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext5_);
  }
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {

  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  feat_info_.Swap(&other->feat_info_);
  matched_id_.Swap(&other->matched_id_);
  std::swap(matched_rate_, other->matched_rate_);
  db_id_.Swap(&other->db_id_);
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  matched_img_.Swap(&other->matched_img_);
  ext1_.Swap(&other->ext1_);
  ext2_.Swap(&other->ext2_);
  ext3_.Swap(&other->ext3_);
  ext4_.Swap(&other->ext4_);
  ext5_.Swap(&other->ext5_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Feature::GetTypeName() const {
  return "face.Feature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional bytes feat_info = 1;
void Feature::clear_feat_info() {
  feat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::feat_info() const {
  // @@protoc_insertion_point(field_get:face.Feature.feat_info)
  return feat_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_feat_info(const ::std::string& value) {
  
  feat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.feat_info)
}
 void Feature::set_feat_info(const char* value) {
  
  feat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.feat_info)
}
 void Feature::set_feat_info(const void* value, size_t size) {
  
  feat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.feat_info)
}
 ::std::string* Feature::mutable_feat_info() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.feat_info)
  return feat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_feat_info() {
  // @@protoc_insertion_point(field_release:face.Feature.feat_info)
  
  return feat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_feat_info(::std::string* feat_info) {
  if (feat_info != NULL) {
    
  } else {
    
  }
  feat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feat_info);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.feat_info)
}

// optional string matched_id = 2;
void Feature::clear_matched_id() {
  matched_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::matched_id() const {
  // @@protoc_insertion_point(field_get:face.Feature.matched_id)
  return matched_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_matched_id(const ::std::string& value) {
  
  matched_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.matched_id)
}
 void Feature::set_matched_id(const char* value) {
  
  matched_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.matched_id)
}
 void Feature::set_matched_id(const char* value, size_t size) {
  
  matched_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.matched_id)
}
 ::std::string* Feature::mutable_matched_id() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.matched_id)
  return matched_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_matched_id() {
  // @@protoc_insertion_point(field_release:face.Feature.matched_id)
  
  return matched_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_matched_id(::std::string* matched_id) {
  if (matched_id != NULL) {
    
  } else {
    
  }
  matched_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matched_id);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.matched_id)
}

// optional float matched_rate = 3;
void Feature::clear_matched_rate() {
  matched_rate_ = 0;
}
 float Feature::matched_rate() const {
  // @@protoc_insertion_point(field_get:face.Feature.matched_rate)
  return matched_rate_;
}
 void Feature::set_matched_rate(float value) {
  
  matched_rate_ = value;
  // @@protoc_insertion_point(field_set:face.Feature.matched_rate)
}

// optional string db_id = 4;
void Feature::clear_db_id() {
  db_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::db_id() const {
  // @@protoc_insertion_point(field_get:face.Feature.db_id)
  return db_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_db_id(const ::std::string& value) {
  
  db_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.db_id)
}
 void Feature::set_db_id(const char* value) {
  
  db_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.db_id)
}
 void Feature::set_db_id(const char* value, size_t size) {
  
  db_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.db_id)
}
 ::std::string* Feature::mutable_db_id() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.db_id)
  return db_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_db_id() {
  // @@protoc_insertion_point(field_release:face.Feature.db_id)
  
  return db_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_db_id(::std::string* db_id) {
  if (db_id != NULL) {
    
  } else {
    
  }
  db_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_id);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.db_id)
}

// optional string name = 5;
void Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:face.Feature.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.name)
}
 void Feature::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.name)
}
 void Feature::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.name)
}
 ::std::string* Feature::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:face.Feature.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.name)
}

// optional string url = 6;
void Feature::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::url() const {
  // @@protoc_insertion_point(field_get:face.Feature.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.url)
}
 void Feature::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.url)
}
 void Feature::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.url)
}
 ::std::string* Feature::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_url() {
  // @@protoc_insertion_point(field_release:face.Feature.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.url)
}

// optional string matched_img = 7;
void Feature::clear_matched_img() {
  matched_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::matched_img() const {
  // @@protoc_insertion_point(field_get:face.Feature.matched_img)
  return matched_img_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_matched_img(const ::std::string& value) {
  
  matched_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.matched_img)
}
 void Feature::set_matched_img(const char* value) {
  
  matched_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.matched_img)
}
 void Feature::set_matched_img(const char* value, size_t size) {
  
  matched_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.matched_img)
}
 ::std::string* Feature::mutable_matched_img() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.matched_img)
  return matched_img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_matched_img() {
  // @@protoc_insertion_point(field_release:face.Feature.matched_img)
  
  return matched_img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_matched_img(::std::string* matched_img) {
  if (matched_img != NULL) {
    
  } else {
    
  }
  matched_img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matched_img);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.matched_img)
}

// optional string ext1 = 8;
void Feature::clear_ext1() {
  ext1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::ext1() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext1)
  return ext1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_ext1(const ::std::string& value) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext1)
}
 void Feature::set_ext1(const char* value) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext1)
}
 void Feature::set_ext1(const char* value, size_t size) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext1)
}
 ::std::string* Feature::mutable_ext1() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext1)
  return ext1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_ext1() {
  // @@protoc_insertion_point(field_release:face.Feature.ext1)
  
  return ext1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_ext1(::std::string* ext1) {
  if (ext1 != NULL) {
    
  } else {
    
  }
  ext1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext1);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext1)
}

// optional string ext2 = 9;
void Feature::clear_ext2() {
  ext2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::ext2() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext2)
  return ext2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_ext2(const ::std::string& value) {
  
  ext2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext2)
}
 void Feature::set_ext2(const char* value) {
  
  ext2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext2)
}
 void Feature::set_ext2(const char* value, size_t size) {
  
  ext2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext2)
}
 ::std::string* Feature::mutable_ext2() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext2)
  return ext2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_ext2() {
  // @@protoc_insertion_point(field_release:face.Feature.ext2)
  
  return ext2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_ext2(::std::string* ext2) {
  if (ext2 != NULL) {
    
  } else {
    
  }
  ext2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext2);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext2)
}

// optional string ext3 = 10;
void Feature::clear_ext3() {
  ext3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::ext3() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext3)
  return ext3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_ext3(const ::std::string& value) {
  
  ext3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext3)
}
 void Feature::set_ext3(const char* value) {
  
  ext3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext3)
}
 void Feature::set_ext3(const char* value, size_t size) {
  
  ext3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext3)
}
 ::std::string* Feature::mutable_ext3() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext3)
  return ext3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_ext3() {
  // @@protoc_insertion_point(field_release:face.Feature.ext3)
  
  return ext3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_ext3(::std::string* ext3) {
  if (ext3 != NULL) {
    
  } else {
    
  }
  ext3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext3);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext3)
}

// optional string ext4 = 11;
void Feature::clear_ext4() {
  ext4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::ext4() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext4)
  return ext4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_ext4(const ::std::string& value) {
  
  ext4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext4)
}
 void Feature::set_ext4(const char* value) {
  
  ext4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext4)
}
 void Feature::set_ext4(const char* value, size_t size) {
  
  ext4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext4)
}
 ::std::string* Feature::mutable_ext4() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext4)
  return ext4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_ext4() {
  // @@protoc_insertion_point(field_release:face.Feature.ext4)
  
  return ext4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_ext4(::std::string* ext4) {
  if (ext4 != NULL) {
    
  } else {
    
  }
  ext4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext4);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext4)
}

// optional string ext5 = 12;
void Feature::clear_ext5() {
  ext5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::ext5() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext5)
  return ext5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_ext5(const ::std::string& value) {
  
  ext5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext5)
}
 void Feature::set_ext5(const char* value) {
  
  ext5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext5)
}
 void Feature::set_ext5(const char* value, size_t size) {
  
  ext5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext5)
}
 ::std::string* Feature::mutable_ext5() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext5)
  return ext5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_ext5() {
  // @@protoc_insertion_point(field_release:face.Feature.ext5)
  
  return ext5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_ext5(::std::string* ext5) {
  if (ext5 != NULL) {
    
  } else {
    
  }
  ext5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext5);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face::kTimestampFieldNumber;
const int Face::kCharacterValueFieldNumber;
const int Face::kSnapshotFieldNumber;
const int Face::kImgtypeFieldNumber;
const int Face::kPicBoxFieldNumber;
const int Face::kFaceBoxFieldNumber;
const int Face::kAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face::Face()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.Face)
}

void Face::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pic_box_ = const_cast< ::face::BBox*>(
      ::face::BBox::internal_default_instance());
#else
  pic_box_ = const_cast< ::face::BBox*>(&::face::BBox::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  face_box_ = const_cast< ::face::BBox*>(
      ::face::BBox::internal_default_instance());
#else
  face_box_ = const_cast< ::face::BBox*>(&::face::BBox::default_instance());
#endif
}

Face::Face(const Face& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.Face)
}

void Face::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_box_ = NULL;
  face_box_ = NULL;
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:face.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  snapshot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pic_box_;
    delete face_box_;
  }
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Face& Face::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

Face* Face::default_instance_ = NULL;

Face* Face::New(::google::protobuf::Arena* arena) const {
  Face* n = new Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Face)
  timestamp_ = GOOGLE_ULONGLONG(0);
  snapshot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pic_box_ != NULL) delete pic_box_;
  pic_box_ = NULL;
  if (GetArenaNoVirtual() == NULL && face_box_ != NULL) delete face_box_;
  face_box_ = NULL;
  character_value_.Clear();
  attrs_.Clear();
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_character_value;
        break;
      }

      // repeated int32 character_value = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_character_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_character_value())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_character_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_snapshot;
        break;
      }

      // optional bytes snapshot = 3;
      case 3: {
        if (tag == 26) {
         parse_snapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_snapshot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_imgtype;
        break;
      }

      // optional string imgtype = 4;
      case 4: {
        if (tag == 34) {
         parse_imgtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->imgtype().data(), this->imgtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "face.Face.imgtype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pic_box;
        break;
      }

      // optional .face.BBox pic_box = 5;
      case 5: {
        if (tag == 42) {
         parse_pic_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pic_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_face_box;
        break;
      }

      // optional .face.BBox face_box = 6;
      case 6: {
        if (tag == 50) {
         parse_face_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_attrs;
        break;
      }

      // repeated .face.Attribute attrs = 7;
      case 7: {
        if (tag == 58) {
         parse_attrs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_attrs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.Face)
  // optional fixed64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->timestamp(), output);
  }

  // repeated int32 character_value = 2 [packed = true];
  if (this->character_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_character_value_cached_byte_size_);
  }
  for (int i = 0; i < this->character_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->character_value(i), output);
  }

  // optional bytes snapshot = 3;
  if (this->snapshot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->snapshot(), output);
  }

  // optional string imgtype = 4;
  if (this->imgtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imgtype().data(), this->imgtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "face.Face.imgtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->imgtype(), output);
  }

  // optional .face.BBox pic_box = 5;
  if (this->has_pic_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->pic_box_, output);
  }

  // optional .face.BBox face_box = 6;
  if (this->has_face_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->face_box_, output);
  }

  // repeated .face.Attribute attrs = 7;
  for (unsigned int i = 0, n = this->attrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->attrs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:face.Face)
}

int Face::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.Face)
  int total_size = 0;

  // optional fixed64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // optional bytes snapshot = 3;
  if (this->snapshot().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->snapshot());
  }

  // optional string imgtype = 4;
  if (this->imgtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imgtype());
  }

  // optional .face.BBox pic_box = 5;
  if (this->has_pic_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pic_box_);
  }

  // optional .face.BBox face_box = 6;
  if (this->has_face_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->face_box_);
  }

  // repeated int32 character_value = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->character_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->character_value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _character_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .face.Attribute attrs = 7;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Face*>(&from));
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  character_value_.MergeFrom(from.character_value_);
  attrs_.MergeFrom(from.attrs_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.snapshot().size() > 0) {

    snapshot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_);
  }
  if (from.imgtype().size() > 0) {

    imgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgtype_);
  }
  if (from.has_pic_box()) {
    mutable_pic_box()->::face::BBox::MergeFrom(from.pic_box());
  }
  if (from.has_face_box()) {
    mutable_face_box()->::face::BBox::MergeFrom(from.face_box());
  }
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {

  return true;
}

void Face::Swap(Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face::InternalSwap(Face* other) {
  std::swap(timestamp_, other->timestamp_);
  character_value_.UnsafeArenaSwap(&other->character_value_);
  snapshot_.Swap(&other->snapshot_);
  imgtype_.Swap(&other->imgtype_);
  std::swap(pic_box_, other->pic_box_);
  std::swap(face_box_, other->face_box_);
  attrs_.UnsafeArenaSwap(&other->attrs_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Face::GetTypeName() const {
  return "face.Face";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Face

// optional fixed64 timestamp = 1;
void Face::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Face::timestamp() const {
  // @@protoc_insertion_point(field_get:face.Face.timestamp)
  return timestamp_;
}
 void Face::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:face.Face.timestamp)
}

// repeated int32 character_value = 2 [packed = true];
int Face::character_value_size() const {
  return character_value_.size();
}
void Face::clear_character_value() {
  character_value_.Clear();
}
 ::google::protobuf::int32 Face::character_value(int index) const {
  // @@protoc_insertion_point(field_get:face.Face.character_value)
  return character_value_.Get(index);
}
 void Face::set_character_value(int index, ::google::protobuf::int32 value) {
  character_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:face.Face.character_value)
}
 void Face::add_character_value(::google::protobuf::int32 value) {
  character_value_.Add(value);
  // @@protoc_insertion_point(field_add:face.Face.character_value)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Face::character_value() const {
  // @@protoc_insertion_point(field_list:face.Face.character_value)
  return character_value_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Face::mutable_character_value() {
  // @@protoc_insertion_point(field_mutable_list:face.Face.character_value)
  return &character_value_;
}

// optional bytes snapshot = 3;
void Face::clear_snapshot() {
  snapshot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Face::snapshot() const {
  // @@protoc_insertion_point(field_get:face.Face.snapshot)
  return snapshot_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Face::set_snapshot(const ::std::string& value) {
  
  snapshot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Face.snapshot)
}
 void Face::set_snapshot(const char* value) {
  
  snapshot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Face.snapshot)
}
 void Face::set_snapshot(const void* value, size_t size) {
  
  snapshot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Face.snapshot)
}
 ::std::string* Face::mutable_snapshot() {
  
  // @@protoc_insertion_point(field_mutable:face.Face.snapshot)
  return snapshot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Face::release_snapshot() {
  // @@protoc_insertion_point(field_release:face.Face.snapshot)
  
  return snapshot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Face::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot != NULL) {
    
  } else {
    
  }
  snapshot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot);
  // @@protoc_insertion_point(field_set_allocated:face.Face.snapshot)
}

// optional string imgtype = 4;
void Face::clear_imgtype() {
  imgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Face::imgtype() const {
  // @@protoc_insertion_point(field_get:face.Face.imgtype)
  return imgtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Face::set_imgtype(const ::std::string& value) {
  
  imgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Face.imgtype)
}
 void Face::set_imgtype(const char* value) {
  
  imgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Face.imgtype)
}
 void Face::set_imgtype(const char* value, size_t size) {
  
  imgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Face.imgtype)
}
 ::std::string* Face::mutable_imgtype() {
  
  // @@protoc_insertion_point(field_mutable:face.Face.imgtype)
  return imgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Face::release_imgtype() {
  // @@protoc_insertion_point(field_release:face.Face.imgtype)
  
  return imgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Face::set_allocated_imgtype(::std::string* imgtype) {
  if (imgtype != NULL) {
    
  } else {
    
  }
  imgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgtype);
  // @@protoc_insertion_point(field_set_allocated:face.Face.imgtype)
}

// optional .face.BBox pic_box = 5;
bool Face::has_pic_box() const {
  return !_is_default_instance_ && pic_box_ != NULL;
}
void Face::clear_pic_box() {
  if (GetArenaNoVirtual() == NULL && pic_box_ != NULL) delete pic_box_;
  pic_box_ = NULL;
}
const ::face::BBox& Face::pic_box() const {
  // @@protoc_insertion_point(field_get:face.Face.pic_box)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pic_box_ != NULL ? *pic_box_ : *default_instance().pic_box_;
#else
  return pic_box_ != NULL ? *pic_box_ : *default_instance_->pic_box_;
#endif
}
::face::BBox* Face::mutable_pic_box() {
  
  if (pic_box_ == NULL) {
    pic_box_ = new ::face::BBox;
  }
  // @@protoc_insertion_point(field_mutable:face.Face.pic_box)
  return pic_box_;
}
::face::BBox* Face::release_pic_box() {
  // @@protoc_insertion_point(field_release:face.Face.pic_box)
  
  ::face::BBox* temp = pic_box_;
  pic_box_ = NULL;
  return temp;
}
void Face::set_allocated_pic_box(::face::BBox* pic_box) {
  delete pic_box_;
  pic_box_ = pic_box;
  if (pic_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.Face.pic_box)
}

// optional .face.BBox face_box = 6;
bool Face::has_face_box() const {
  return !_is_default_instance_ && face_box_ != NULL;
}
void Face::clear_face_box() {
  if (GetArenaNoVirtual() == NULL && face_box_ != NULL) delete face_box_;
  face_box_ = NULL;
}
const ::face::BBox& Face::face_box() const {
  // @@protoc_insertion_point(field_get:face.Face.face_box)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return face_box_ != NULL ? *face_box_ : *default_instance().face_box_;
#else
  return face_box_ != NULL ? *face_box_ : *default_instance_->face_box_;
#endif
}
::face::BBox* Face::mutable_face_box() {
  
  if (face_box_ == NULL) {
    face_box_ = new ::face::BBox;
  }
  // @@protoc_insertion_point(field_mutable:face.Face.face_box)
  return face_box_;
}
::face::BBox* Face::release_face_box() {
  // @@protoc_insertion_point(field_release:face.Face.face_box)
  
  ::face::BBox* temp = face_box_;
  face_box_ = NULL;
  return temp;
}
void Face::set_allocated_face_box(::face::BBox* face_box) {
  delete face_box_;
  face_box_ = face_box;
  if (face_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.Face.face_box)
}

// repeated .face.Attribute attrs = 7;
int Face::attrs_size() const {
  return attrs_.size();
}
void Face::clear_attrs() {
  attrs_.Clear();
}
const ::face::Attribute& Face::attrs(int index) const {
  // @@protoc_insertion_point(field_get:face.Face.attrs)
  return attrs_.Get(index);
}
::face::Attribute* Face::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:face.Face.attrs)
  return attrs_.Mutable(index);
}
::face::Attribute* Face::add_attrs() {
  // @@protoc_insertion_point(field_add:face.Face.attrs)
  return attrs_.Add();
}
::google::protobuf::RepeatedPtrField< ::face::Attribute >*
Face::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:face.Face.attrs)
  return &attrs_;
}
const ::google::protobuf::RepeatedPtrField< ::face::Attribute >&
Face::attrs() const {
  // @@protoc_insertion_point(field_list:face.Face.attrs)
  return attrs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kTrackIdFieldNumber;
const int Person::kFacesFieldNumber;
const int Person::kFeaturesFieldNumber;
const int Person::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.Person)
}

void Person::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Person::Person(const Person& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.Person)
}

void Person::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:face.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Person& Person::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Person)
  track_id_.Clear();
  faces_.Clear();
  features_.Clear();
  events_.Clear();
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 track_id = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_track_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_track_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_faces;
        break;
      }

      // repeated .face.Face faces = 2;
      case 2: {
        if (tag == 18) {
         parse_faces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_faces;
        if (input->ExpectTag(26)) goto parse_loop_features;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .face.Feature features = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_features;
        if (input->ExpectTag(34)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .face.FlowEvent events = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.Person)
  // repeated int32 track_id = 1;
  if (this->track_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_track_id_cached_byte_size_);
  }
  for (int i = 0; i < this->track_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->track_id(i), output);
  }

  // repeated .face.Face faces = 2;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->faces(i), output);
  }

  // repeated .face.Feature features = 3;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->features(i), output);
  }

  // repeated .face.FlowEvent events = 4;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->events(i), output);
  }

  // @@protoc_insertion_point(serialize_end:face.Person)
}

int Person::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.Person)
  int total_size = 0;

  // repeated int32 track_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->track_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->track_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _track_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .face.Face faces = 2;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  // repeated .face.Feature features = 3;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  // repeated .face.FlowEvent events = 4;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Person*>(&from));
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  track_id_.MergeFrom(from.track_id_);
  faces_.MergeFrom(from.faces_);
  features_.MergeFrom(from.features_);
  events_.MergeFrom(from.events_);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {

  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  track_id_.UnsafeArenaSwap(&other->track_id_);
  faces_.UnsafeArenaSwap(&other->faces_);
  features_.UnsafeArenaSwap(&other->features_);
  events_.UnsafeArenaSwap(&other->events_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Person::GetTypeName() const {
  return "face.Person";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// repeated int32 track_id = 1;
int Person::track_id_size() const {
  return track_id_.size();
}
void Person::clear_track_id() {
  track_id_.Clear();
}
 ::google::protobuf::int32 Person::track_id(int index) const {
  // @@protoc_insertion_point(field_get:face.Person.track_id)
  return track_id_.Get(index);
}
 void Person::set_track_id(int index, ::google::protobuf::int32 value) {
  track_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:face.Person.track_id)
}
 void Person::add_track_id(::google::protobuf::int32 value) {
  track_id_.Add(value);
  // @@protoc_insertion_point(field_add:face.Person.track_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Person::track_id() const {
  // @@protoc_insertion_point(field_list:face.Person.track_id)
  return track_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Person::mutable_track_id() {
  // @@protoc_insertion_point(field_mutable_list:face.Person.track_id)
  return &track_id_;
}

// repeated .face.Face faces = 2;
int Person::faces_size() const {
  return faces_.size();
}
void Person::clear_faces() {
  faces_.Clear();
}
const ::face::Face& Person::faces(int index) const {
  // @@protoc_insertion_point(field_get:face.Person.faces)
  return faces_.Get(index);
}
::face::Face* Person::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:face.Person.faces)
  return faces_.Mutable(index);
}
::face::Face* Person::add_faces() {
  // @@protoc_insertion_point(field_add:face.Person.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::face::Face >*
Person::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:face.Person.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::face::Face >&
Person::faces() const {
  // @@protoc_insertion_point(field_list:face.Person.faces)
  return faces_;
}

// repeated .face.Feature features = 3;
int Person::features_size() const {
  return features_.size();
}
void Person::clear_features() {
  features_.Clear();
}
const ::face::Feature& Person::features(int index) const {
  // @@protoc_insertion_point(field_get:face.Person.features)
  return features_.Get(index);
}
::face::Feature* Person::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:face.Person.features)
  return features_.Mutable(index);
}
::face::Feature* Person::add_features() {
  // @@protoc_insertion_point(field_add:face.Person.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::face::Feature >*
Person::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:face.Person.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::face::Feature >&
Person::features() const {
  // @@protoc_insertion_point(field_list:face.Person.features)
  return features_;
}

// repeated .face.FlowEvent events = 4;
int Person::events_size() const {
  return events_.size();
}
void Person::clear_events() {
  events_.Clear();
}
const ::face::FlowEvent& Person::events(int index) const {
  // @@protoc_insertion_point(field_get:face.Person.events)
  return events_.Get(index);
}
::face::FlowEvent* Person::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:face.Person.events)
  return events_.Mutable(index);
}
::face::FlowEvent* Person::add_events() {
  // @@protoc_insertion_point(field_add:face.Person.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::face::FlowEvent >*
Person::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:face.Person.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::face::FlowEvent >&
Person::events() const {
  // @@protoc_insertion_point(field_list:face.Person.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Capture::kPersonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Capture::Capture()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:face.Capture)
}

void Capture::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Capture::Capture(const Capture& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:face.Capture)
}

void Capture::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Capture::~Capture() {
  // @@protoc_insertion_point(destructor:face.Capture)
  SharedDtor();
}

void Capture::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Capture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Capture& Capture::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_face_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_face_2eproto();
#endif
  return *default_instance_;
}

Capture* Capture::default_instance_ = NULL;

Capture* Capture::New(::google::protobuf::Arena* arena) const {
  Capture* n = new Capture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Capture::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Capture)
  persons_.Clear();
}

bool Capture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:face.Capture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .face.Person persons = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_persons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_persons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_persons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:face.Capture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:face.Capture)
  return false;
#undef DO_
}

void Capture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:face.Capture)
  // repeated .face.Person persons = 1;
  for (unsigned int i = 0, n = this->persons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->persons(i), output);
  }

  // @@protoc_insertion_point(serialize_end:face.Capture)
}

int Capture::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:face.Capture)
  int total_size = 0;

  // repeated .face.Person persons = 1;
  total_size += 1 * this->persons_size();
  for (int i = 0; i < this->persons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->persons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capture::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Capture*>(&from));
}

void Capture::MergeFrom(const Capture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:face.Capture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  persons_.MergeFrom(from.persons_);
}

void Capture::CopyFrom(const Capture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Capture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capture::IsInitialized() const {

  return true;
}

void Capture::Swap(Capture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Capture::InternalSwap(Capture* other) {
  persons_.UnsafeArenaSwap(&other->persons_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Capture::GetTypeName() const {
  return "face.Capture";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Capture

// repeated .face.Person persons = 1;
int Capture::persons_size() const {
  return persons_.size();
}
void Capture::clear_persons() {
  persons_.Clear();
}
const ::face::Person& Capture::persons(int index) const {
  // @@protoc_insertion_point(field_get:face.Capture.persons)
  return persons_.Get(index);
}
::face::Person* Capture::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:face.Capture.persons)
  return persons_.Mutable(index);
}
::face::Person* Capture::add_persons() {
  // @@protoc_insertion_point(field_add:face.Capture.persons)
  return persons_.Add();
}
::google::protobuf::RepeatedPtrField< ::face::Person >*
Capture::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:face.Capture.persons)
  return &persons_;
}
const ::google::protobuf::RepeatedPtrField< ::face::Person >&
Capture::persons() const {
  // @@protoc_insertion_point(field_list:face.Capture.persons)
  return persons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace face

// @@protoc_insertion_point(global_scope)
