// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face.proto

#ifndef PROTOBUF_face_2eproto__INCLUDED
#define PROTOBUF_face_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace face {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_face_2eproto();
void protobuf_AssignDesc_face_2eproto();
void protobuf_ShutdownFile_face_2eproto();

class Attribute;
class BBox;
class Capture;
class Face;
class Feature;
class FileCode;
class FlowEvent;
class FlowEventBucket;
class FlowEventStats;
class Landmarks;
class Person;
class Point;
class Result;
class Target;

enum HobotMediaType {
  HobotDefaultFrame = 0,
  HobotVideoFrameH264 = 1,
  HobotSmartFrameTemp = 11,
  HobotFeatureIndexTemp = 13,
  HobotImageFrameYUV = 33,
  HobotImageFrameRGB = 34,
  HobotImageFrameJpeg = 35,
  HobotSmartData = 49,
  HobotFeatureIndex = 50,
  HobotSnapshot = 51,
  HobotBackGround = 52,
  HobotFlowEvent = 53,
  HobotFlowEventStat = 54,
  HobotMediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HobotMediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HobotMediaType_IsValid(int value);
const HobotMediaType HobotMediaType_MIN = HobotDefaultFrame;
const HobotMediaType HobotMediaType_MAX = HobotFlowEventStat;
const int HobotMediaType_ARRAYSIZE = HobotMediaType_MAX + 1;

// ===================================================================

class FileCode : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.FileCode) */ {
 public:
  FileCode();
  virtual ~FileCode();

  FileCode(const FileCode& from);

  inline FileCode& operator=(const FileCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const FileCode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FileCode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FileCode* other);

  // implements Message ----------------------------------------------

  inline FileCode* New() const { return New(NULL); }

  FileCode* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FileCode& from);
  void MergeFrom(const FileCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string checkCode = 1 [default = "f8a22cb2ea0b694692b2e41894e53cd8"];
  void clear_checkcode();
  static const int kCheckCodeFieldNumber = 1;
  const ::std::string& checkcode() const;
  void set_checkcode(const ::std::string& value);
  void set_checkcode(const char* value);
  void set_checkcode(const char* value, size_t size);
  ::std::string* mutable_checkcode();
  ::std::string* release_checkcode();
  void set_allocated_checkcode(::std::string* checkcode);

  // optional int32 version = 2 [default = 1];
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:face.FileCode)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  static ::std::string* _default_checkcode_;
  ::google::protobuf::internal::ArenaStringPtr checkcode_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static FileCode* default_instance_;
};
// -------------------------------------------------------------------

class Attribute : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.Attribute) */ {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }

  static const Attribute& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Attribute* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Attribute* other);

  // implements Message ----------------------------------------------

  inline Attribute* New() const { return New(NULL); }

  Attribute* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Attribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 int_val = 2;
  void clear_int_val();
  static const int kIntValFieldNumber = 2;
  ::google::protobuf::int32 int_val() const;
  void set_int_val(::google::protobuf::int32 value);

  // optional string str_val = 3;
  void clear_str_val();
  static const int kStrValFieldNumber = 3;
  const ::std::string& str_val() const;
  void set_str_val(const ::std::string& value);
  void set_str_val(const char* value);
  void set_str_val(const char* value, size_t size);
  ::std::string* mutable_str_val();
  ::std::string* release_str_val();
  void set_allocated_str_val(::std::string* str_val);

  // @@protoc_insertion_point(class_scope:face.Attribute)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 int_val_;
  ::google::protobuf::internal::ArenaStringPtr str_val_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static Attribute* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const Point& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Point* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional float score = 3;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:face.Point)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  float score_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Landmarks : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.Landmarks) */ {
 public:
  Landmarks();
  virtual ~Landmarks();

  Landmarks(const Landmarks& from);

  inline Landmarks& operator=(const Landmarks& from) {
    CopyFrom(from);
    return *this;
  }

  static const Landmarks& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Landmarks* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Landmarks* other);

  // implements Message ----------------------------------------------

  inline Landmarks* New() const { return New(NULL); }

  Landmarks* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Landmarks& from);
  void MergeFrom(const Landmarks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Landmarks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 point_num = 1;
  void clear_point_num();
  static const int kPointNumFieldNumber = 1;
  ::google::protobuf::int32 point_num() const;
  void set_point_num(::google::protobuf::int32 value);

  // repeated .face.Point points = 2;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  const ::face::Point& points(int index) const;
  ::face::Point* mutable_points(int index);
  ::face::Point* add_points();
  ::google::protobuf::RepeatedPtrField< ::face::Point >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::face::Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:face.Landmarks)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::face::Point > points_;
  ::google::protobuf::int32 point_num_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static Landmarks* default_instance_;
};
// -------------------------------------------------------------------

class BBox : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.BBox) */ {
 public:
  BBox();
  virtual ~BBox();

  BBox(const BBox& from);

  inline BBox& operator=(const BBox& from) {
    CopyFrom(from);
    return *this;
  }

  static const BBox& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BBox* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BBox* other);

  // implements Message ----------------------------------------------

  inline BBox* New() const { return New(NULL); }

  BBox* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BBox& from);
  void MergeFrom(const BBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 top = 1;
  void clear_top();
  static const int kTopFieldNumber = 1;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // optional int32 left = 2;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // optional int32 right = 3;
  void clear_right();
  static const int kRightFieldNumber = 3;
  ::google::protobuf::int32 right() const;
  void set_right(::google::protobuf::int32 value);

  // optional int32 bottom = 4;
  void clear_bottom();
  static const int kBottomFieldNumber = 4;
  ::google::protobuf::int32 bottom() const;
  void set_bottom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:face.BBox)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 bottom_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static BBox* default_instance_;
};
// -------------------------------------------------------------------

class Target : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.Target) */ {
 public:
  Target();
  virtual ~Target();

  Target(const Target& from);

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }

  static const Target& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Target* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Target* other);

  // implements Message ----------------------------------------------

  inline Target* New() const { return New(NULL); }

  Target* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Target* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .face.BBox box = 3;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 3;
  const ::face::BBox& box() const;
  ::face::BBox* mutable_box();
  ::face::BBox* release_box();
  void set_allocated_box(::face::BBox* box);

  // repeated .face.Attribute attrs = 4;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 4;
  const ::face::Attribute& attrs(int index) const;
  ::face::Attribute* mutable_attrs(int index);
  ::face::Attribute* add_attrs();
  ::google::protobuf::RepeatedPtrField< ::face::Attribute >*
      mutable_attrs();
  const ::google::protobuf::RepeatedPtrField< ::face::Attribute >&
      attrs() const;

  // optional .face.Landmarks lmks = 5;
  bool has_lmks() const;
  void clear_lmks();
  static const int kLmksFieldNumber = 5;
  const ::face::Landmarks& lmks() const;
  ::face::Landmarks* mutable_lmks();
  ::face::Landmarks* release_lmks();
  void set_allocated_lmks(::face::Landmarks* lmks);

  // @@protoc_insertion_point(class_scope:face.Target)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::face::BBox* box_;
  ::google::protobuf::RepeatedPtrField< ::face::Attribute > attrs_;
  ::face::Landmarks* lmks_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static Target* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  static const Result& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Result* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  inline Result* New() const { return New(NULL); }

  Result* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional int32 frame_status = 2;
  void clear_frame_status();
  static const int kFrameStatusFieldNumber = 2;
  ::google::protobuf::int32 frame_status() const;
  void set_frame_status(::google::protobuf::int32 value);

  // repeated .face.Target targets = 3;
  int targets_size() const;
  void clear_targets();
  static const int kTargetsFieldNumber = 3;
  const ::face::Target& targets(int index) const;
  ::face::Target* mutable_targets(int index);
  ::face::Target* add_targets();
  ::google::protobuf::RepeatedPtrField< ::face::Target >*
      mutable_targets();
  const ::google::protobuf::RepeatedPtrField< ::face::Target >&
      targets() const;

  // @@protoc_insertion_point(class_scope:face.Result)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::RepeatedPtrField< ::face::Target > targets_;
  ::google::protobuf::int32 frame_status_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// -------------------------------------------------------------------

class FlowEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.FlowEvent) */ {
 public:
  FlowEvent();
  virtual ~FlowEvent();

  FlowEvent(const FlowEvent& from);

  inline FlowEvent& operator=(const FlowEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const FlowEvent& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FlowEvent* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FlowEvent* other);

  // implements Message ----------------------------------------------

  inline FlowEvent* New() const { return New(NULL); }

  FlowEvent* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FlowEvent& from);
  void MergeFrom(const FlowEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlowEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // optional string extra = 2;
  void clear_extra();
  static const int kExtraFieldNumber = 2;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // optional int64 event_time = 3;
  void clear_event_time();
  static const int kEventTimeFieldNumber = 3;
  ::google::protobuf::int64 event_time() const;
  void set_event_time(::google::protobuf::int64 value);

  // optional int64 send_time = 4;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 4;
  ::google::protobuf::int64 send_time() const;
  void set_send_time(::google::protobuf::int64 value);

  // optional int32 line_id = 5;
  void clear_line_id();
  static const int kLineIdFieldNumber = 5;
  ::google::protobuf::int32 line_id() const;
  void set_line_id(::google::protobuf::int32 value);

  // optional int32 event_type = 6;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 6;
  ::google::protobuf::int32 event_type() const;
  void set_event_type(::google::protobuf::int32 value);

  // optional int32 msg_type = 7;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 7;
  ::google::protobuf::int32 msg_type() const;
  void set_msg_type(::google::protobuf::int32 value);

  // optional int32 age = 8;
  void clear_age();
  static const int kAgeFieldNumber = 8;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // optional int32 gender = 9;
  void clear_gender();
  static const int kGenderFieldNumber = 9;
  ::google::protobuf::int32 gender() const;
  void set_gender(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:face.FlowEvent)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  ::google::protobuf::int64 event_time_;
  ::google::protobuf::int64 send_time_;
  ::google::protobuf::int32 line_id_;
  ::google::protobuf::int32 event_type_;
  ::google::protobuf::int32 msg_type_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 gender_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static FlowEvent* default_instance_;
};
// -------------------------------------------------------------------

class FlowEventBucket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.FlowEventBucket) */ {
 public:
  FlowEventBucket();
  virtual ~FlowEventBucket();

  FlowEventBucket(const FlowEventBucket& from);

  inline FlowEventBucket& operator=(const FlowEventBucket& from) {
    CopyFrom(from);
    return *this;
  }

  static const FlowEventBucket& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FlowEventBucket* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FlowEventBucket* other);

  // implements Message ----------------------------------------------

  inline FlowEventBucket* New() const { return New(NULL); }

  FlowEventBucket* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FlowEventBucket& from);
  void MergeFrom(const FlowEventBucket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlowEventBucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_0_6 = 1;
  void clear_num_0_6();
  static const int kNum06FieldNumber = 1;
  ::google::protobuf::int32 num_0_6() const;
  void set_num_0_6(::google::protobuf::int32 value);

  // optional int32 num_7_12 = 2;
  void clear_num_7_12();
  static const int kNum712FieldNumber = 2;
  ::google::protobuf::int32 num_7_12() const;
  void set_num_7_12(::google::protobuf::int32 value);

  // optional int32 num_13_18 = 3;
  void clear_num_13_18();
  static const int kNum1318FieldNumber = 3;
  ::google::protobuf::int32 num_13_18() const;
  void set_num_13_18(::google::protobuf::int32 value);

  // optional int32 num_19_28 = 4;
  void clear_num_19_28();
  static const int kNum1928FieldNumber = 4;
  ::google::protobuf::int32 num_19_28() const;
  void set_num_19_28(::google::protobuf::int32 value);

  // optional int32 num_29_35 = 5;
  void clear_num_29_35();
  static const int kNum2935FieldNumber = 5;
  ::google::protobuf::int32 num_29_35() const;
  void set_num_29_35(::google::protobuf::int32 value);

  // optional int32 num_36_45 = 6;
  void clear_num_36_45();
  static const int kNum3645FieldNumber = 6;
  ::google::protobuf::int32 num_36_45() const;
  void set_num_36_45(::google::protobuf::int32 value);

  // optional int32 num_46_55 = 7;
  void clear_num_46_55();
  static const int kNum4655FieldNumber = 7;
  ::google::protobuf::int32 num_46_55() const;
  void set_num_46_55(::google::protobuf::int32 value);

  // optional int32 num_gt_55 = 8;
  void clear_num_gt_55();
  static const int kNumGt55FieldNumber = 8;
  ::google::protobuf::int32 num_gt_55() const;
  void set_num_gt_55(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:face.FlowEventBucket)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 num_0_6_;
  ::google::protobuf::int32 num_7_12_;
  ::google::protobuf::int32 num_13_18_;
  ::google::protobuf::int32 num_19_28_;
  ::google::protobuf::int32 num_29_35_;
  ::google::protobuf::int32 num_36_45_;
  ::google::protobuf::int32 num_46_55_;
  ::google::protobuf::int32 num_gt_55_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static FlowEventBucket* default_instance_;
};
// -------------------------------------------------------------------

class FlowEventStats : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.FlowEventStats) */ {
 public:
  FlowEventStats();
  virtual ~FlowEventStats();

  FlowEventStats(const FlowEventStats& from);

  inline FlowEventStats& operator=(const FlowEventStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const FlowEventStats& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FlowEventStats* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FlowEventStats* other);

  // implements Message ----------------------------------------------

  inline FlowEventStats* New() const { return New(NULL); }

  FlowEventStats* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FlowEventStats& from);
  void MergeFrom(const FlowEventStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlowEventStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // optional int32 person_total = 2;
  void clear_person_total();
  static const int kPersonTotalFieldNumber = 2;
  ::google::protobuf::int32 person_total() const;
  void set_person_total(::google::protobuf::int32 value);

  // optional int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int64 interval = 4;
  void clear_interval();
  static const int kIntervalFieldNumber = 4;
  ::google::protobuf::int64 interval() const;
  void set_interval(::google::protobuf::int64 value);

  // optional int32 front_num = 5;
  void clear_front_num();
  static const int kFrontNumFieldNumber = 5;
  ::google::protobuf::int32 front_num() const;
  void set_front_num(::google::protobuf::int32 value);

  // optional int32 in_num = 6;
  void clear_in_num();
  static const int kInNumFieldNumber = 6;
  ::google::protobuf::int32 in_num() const;
  void set_in_num(::google::protobuf::int32 value);

  // optional int32 in_female_num = 7;
  void clear_in_female_num();
  static const int kInFemaleNumFieldNumber = 7;
  ::google::protobuf::int32 in_female_num() const;
  void set_in_female_num(::google::protobuf::int32 value);

  // optional int32 in_male_num = 8;
  void clear_in_male_num();
  static const int kInMaleNumFieldNumber = 8;
  ::google::protobuf::int32 in_male_num() const;
  void set_in_male_num(::google::protobuf::int32 value);

  // optional int32 out_num = 9;
  void clear_out_num();
  static const int kOutNumFieldNumber = 9;
  ::google::protobuf::int32 out_num() const;
  void set_out_num(::google::protobuf::int32 value);

  // optional int32 out_female_num = 10;
  void clear_out_female_num();
  static const int kOutFemaleNumFieldNumber = 10;
  ::google::protobuf::int32 out_female_num() const;
  void set_out_female_num(::google::protobuf::int32 value);

  // optional int32 out_male_num = 11;
  void clear_out_male_num();
  static const int kOutMaleNumFieldNumber = 11;
  ::google::protobuf::int32 out_male_num() const;
  void set_out_male_num(::google::protobuf::int32 value);

  // optional .face.FlowEventBucket in_male_bucket = 12;
  bool has_in_male_bucket() const;
  void clear_in_male_bucket();
  static const int kInMaleBucketFieldNumber = 12;
  const ::face::FlowEventBucket& in_male_bucket() const;
  ::face::FlowEventBucket* mutable_in_male_bucket();
  ::face::FlowEventBucket* release_in_male_bucket();
  void set_allocated_in_male_bucket(::face::FlowEventBucket* in_male_bucket);

  // optional .face.FlowEventBucket in_female_bucket = 13;
  bool has_in_female_bucket() const;
  void clear_in_female_bucket();
  static const int kInFemaleBucketFieldNumber = 13;
  const ::face::FlowEventBucket& in_female_bucket() const;
  ::face::FlowEventBucket* mutable_in_female_bucket();
  ::face::FlowEventBucket* release_in_female_bucket();
  void set_allocated_in_female_bucket(::face::FlowEventBucket* in_female_bucket);

  // optional .face.FlowEventBucket out_male_bucket = 14;
  bool has_out_male_bucket() const;
  void clear_out_male_bucket();
  static const int kOutMaleBucketFieldNumber = 14;
  const ::face::FlowEventBucket& out_male_bucket() const;
  ::face::FlowEventBucket* mutable_out_male_bucket();
  ::face::FlowEventBucket* release_out_male_bucket();
  void set_allocated_out_male_bucket(::face::FlowEventBucket* out_male_bucket);

  // optional .face.FlowEventBucket out_female_bucket = 15;
  bool has_out_female_bucket() const;
  void clear_out_female_bucket();
  static const int kOutFemaleBucketFieldNumber = 15;
  const ::face::FlowEventBucket& out_female_bucket() const;
  ::face::FlowEventBucket* mutable_out_female_bucket();
  ::face::FlowEventBucket* release_out_female_bucket();
  void set_allocated_out_female_bucket(::face::FlowEventBucket* out_female_bucket);

  // @@protoc_insertion_point(class_scope:face.FlowEventStats)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 person_total_;
  ::google::protobuf::int32 front_num_;
  ::google::protobuf::int64 interval_;
  ::google::protobuf::int32 in_num_;
  ::google::protobuf::int32 in_female_num_;
  ::google::protobuf::int32 in_male_num_;
  ::google::protobuf::int32 out_num_;
  ::google::protobuf::int32 out_female_num_;
  ::google::protobuf::int32 out_male_num_;
  ::face::FlowEventBucket* in_male_bucket_;
  ::face::FlowEventBucket* in_female_bucket_;
  ::face::FlowEventBucket* out_male_bucket_;
  ::face::FlowEventBucket* out_female_bucket_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static FlowEventStats* default_instance_;
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }

  static const Feature& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Feature* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Feature* other);

  // implements Message ----------------------------------------------

  inline Feature* New() const { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes feat_info = 1;
  void clear_feat_info();
  static const int kFeatInfoFieldNumber = 1;
  const ::std::string& feat_info() const;
  void set_feat_info(const ::std::string& value);
  void set_feat_info(const char* value);
  void set_feat_info(const void* value, size_t size);
  ::std::string* mutable_feat_info();
  ::std::string* release_feat_info();
  void set_allocated_feat_info(::std::string* feat_info);

  // optional string matched_id = 2;
  void clear_matched_id();
  static const int kMatchedIdFieldNumber = 2;
  const ::std::string& matched_id() const;
  void set_matched_id(const ::std::string& value);
  void set_matched_id(const char* value);
  void set_matched_id(const char* value, size_t size);
  ::std::string* mutable_matched_id();
  ::std::string* release_matched_id();
  void set_allocated_matched_id(::std::string* matched_id);

  // optional float matched_rate = 3;
  void clear_matched_rate();
  static const int kMatchedRateFieldNumber = 3;
  float matched_rate() const;
  void set_matched_rate(float value);

  // optional string db_id = 4;
  void clear_db_id();
  static const int kDbIdFieldNumber = 4;
  const ::std::string& db_id() const;
  void set_db_id(const ::std::string& value);
  void set_db_id(const char* value);
  void set_db_id(const char* value, size_t size);
  ::std::string* mutable_db_id();
  ::std::string* release_db_id();
  void set_allocated_db_id(::std::string* db_id);

  // optional string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string url = 6;
  void clear_url();
  static const int kUrlFieldNumber = 6;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string matched_img = 7;
  void clear_matched_img();
  static const int kMatchedImgFieldNumber = 7;
  const ::std::string& matched_img() const;
  void set_matched_img(const ::std::string& value);
  void set_matched_img(const char* value);
  void set_matched_img(const char* value, size_t size);
  ::std::string* mutable_matched_img();
  ::std::string* release_matched_img();
  void set_allocated_matched_img(::std::string* matched_img);

  // optional string ext1 = 8;
  void clear_ext1();
  static const int kExt1FieldNumber = 8;
  const ::std::string& ext1() const;
  void set_ext1(const ::std::string& value);
  void set_ext1(const char* value);
  void set_ext1(const char* value, size_t size);
  ::std::string* mutable_ext1();
  ::std::string* release_ext1();
  void set_allocated_ext1(::std::string* ext1);

  // optional string ext2 = 9;
  void clear_ext2();
  static const int kExt2FieldNumber = 9;
  const ::std::string& ext2() const;
  void set_ext2(const ::std::string& value);
  void set_ext2(const char* value);
  void set_ext2(const char* value, size_t size);
  ::std::string* mutable_ext2();
  ::std::string* release_ext2();
  void set_allocated_ext2(::std::string* ext2);

  // optional string ext3 = 10;
  void clear_ext3();
  static const int kExt3FieldNumber = 10;
  const ::std::string& ext3() const;
  void set_ext3(const ::std::string& value);
  void set_ext3(const char* value);
  void set_ext3(const char* value, size_t size);
  ::std::string* mutable_ext3();
  ::std::string* release_ext3();
  void set_allocated_ext3(::std::string* ext3);

  // optional string ext4 = 11;
  void clear_ext4();
  static const int kExt4FieldNumber = 11;
  const ::std::string& ext4() const;
  void set_ext4(const ::std::string& value);
  void set_ext4(const char* value);
  void set_ext4(const char* value, size_t size);
  ::std::string* mutable_ext4();
  ::std::string* release_ext4();
  void set_allocated_ext4(::std::string* ext4);

  // optional string ext5 = 12;
  void clear_ext5();
  static const int kExt5FieldNumber = 12;
  const ::std::string& ext5() const;
  void set_ext5(const ::std::string& value);
  void set_ext5(const char* value);
  void set_ext5(const char* value, size_t size);
  ::std::string* mutable_ext5();
  ::std::string* release_ext5();
  void set_allocated_ext5(::std::string* ext5);

  // @@protoc_insertion_point(class_scope:face.Feature)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr feat_info_;
  ::google::protobuf::internal::ArenaStringPtr matched_id_;
  ::google::protobuf::internal::ArenaStringPtr db_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr matched_img_;
  ::google::protobuf::internal::ArenaStringPtr ext1_;
  ::google::protobuf::internal::ArenaStringPtr ext2_;
  ::google::protobuf::internal::ArenaStringPtr ext3_;
  ::google::protobuf::internal::ArenaStringPtr ext4_;
  ::google::protobuf::internal::ArenaStringPtr ext5_;
  float matched_rate_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static Feature* default_instance_;
};
// -------------------------------------------------------------------

class Face : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.Face) */ {
 public:
  Face();
  virtual ~Face();

  Face(const Face& from);

  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }

  static const Face& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Face* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Face* other);

  // implements Message ----------------------------------------------

  inline Face* New() const { return New(NULL); }

  Face* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Face& from);
  void MergeFrom(const Face& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Face* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // repeated int32 character_value = 2 [packed = true];
  int character_value_size() const;
  void clear_character_value();
  static const int kCharacterValueFieldNumber = 2;
  ::google::protobuf::int32 character_value(int index) const;
  void set_character_value(int index, ::google::protobuf::int32 value);
  void add_character_value(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      character_value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_character_value();

  // optional bytes snapshot = 3;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 3;
  const ::std::string& snapshot() const;
  void set_snapshot(const ::std::string& value);
  void set_snapshot(const char* value);
  void set_snapshot(const void* value, size_t size);
  ::std::string* mutable_snapshot();
  ::std::string* release_snapshot();
  void set_allocated_snapshot(::std::string* snapshot);

  // optional string imgtype = 4;
  void clear_imgtype();
  static const int kImgtypeFieldNumber = 4;
  const ::std::string& imgtype() const;
  void set_imgtype(const ::std::string& value);
  void set_imgtype(const char* value);
  void set_imgtype(const char* value, size_t size);
  ::std::string* mutable_imgtype();
  ::std::string* release_imgtype();
  void set_allocated_imgtype(::std::string* imgtype);

  // optional .face.BBox pic_box = 5;
  bool has_pic_box() const;
  void clear_pic_box();
  static const int kPicBoxFieldNumber = 5;
  const ::face::BBox& pic_box() const;
  ::face::BBox* mutable_pic_box();
  ::face::BBox* release_pic_box();
  void set_allocated_pic_box(::face::BBox* pic_box);

  // optional .face.BBox face_box = 6;
  bool has_face_box() const;
  void clear_face_box();
  static const int kFaceBoxFieldNumber = 6;
  const ::face::BBox& face_box() const;
  ::face::BBox* mutable_face_box();
  ::face::BBox* release_face_box();
  void set_allocated_face_box(::face::BBox* face_box);

  // repeated .face.Attribute attrs = 7;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 7;
  const ::face::Attribute& attrs(int index) const;
  ::face::Attribute* mutable_attrs(int index);
  ::face::Attribute* add_attrs();
  ::google::protobuf::RepeatedPtrField< ::face::Attribute >*
      mutable_attrs();
  const ::google::protobuf::RepeatedPtrField< ::face::Attribute >&
      attrs() const;

  // @@protoc_insertion_point(class_scope:face.Face)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > character_value_;
  mutable int _character_value_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_;
  ::google::protobuf::internal::ArenaStringPtr imgtype_;
  ::face::BBox* pic_box_;
  ::face::BBox* face_box_;
  ::google::protobuf::RepeatedPtrField< ::face::Attribute > attrs_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static Face* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  static const Person& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Person* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  inline Person* New() const { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 track_id = 1;
  int track_id_size() const;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 1;
  ::google::protobuf::int32 track_id(int index) const;
  void set_track_id(int index, ::google::protobuf::int32 value);
  void add_track_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      track_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_track_id();

  // repeated .face.Face faces = 2;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 2;
  const ::face::Face& faces(int index) const;
  ::face::Face* mutable_faces(int index);
  ::face::Face* add_faces();
  ::google::protobuf::RepeatedPtrField< ::face::Face >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::face::Face >&
      faces() const;

  // repeated .face.Feature features = 3;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 3;
  const ::face::Feature& features(int index) const;
  ::face::Feature* mutable_features(int index);
  ::face::Feature* add_features();
  ::google::protobuf::RepeatedPtrField< ::face::Feature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::face::Feature >&
      features() const;

  // repeated .face.FlowEvent events = 4;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 4;
  const ::face::FlowEvent& events(int index) const;
  ::face::FlowEvent* mutable_events(int index);
  ::face::FlowEvent* add_events();
  ::google::protobuf::RepeatedPtrField< ::face::FlowEvent >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::face::FlowEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:face.Person)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > track_id_;
  mutable int _track_id_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::face::Face > faces_;
  ::google::protobuf::RepeatedPtrField< ::face::Feature > features_;
  ::google::protobuf::RepeatedPtrField< ::face::FlowEvent > events_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class Capture : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:face.Capture) */ {
 public:
  Capture();
  virtual ~Capture();

  Capture(const Capture& from);

  inline Capture& operator=(const Capture& from) {
    CopyFrom(from);
    return *this;
  }

  static const Capture& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Capture* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Capture* other);

  // implements Message ----------------------------------------------

  inline Capture* New() const { return New(NULL); }

  Capture* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Capture& from);
  void MergeFrom(const Capture& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Capture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .face.Person persons = 1;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 1;
  const ::face::Person& persons(int index) const;
  ::face::Person* mutable_persons(int index);
  ::face::Person* add_persons();
  ::google::protobuf::RepeatedPtrField< ::face::Person >*
      mutable_persons();
  const ::google::protobuf::RepeatedPtrField< ::face::Person >&
      persons() const;

  // @@protoc_insertion_point(class_scope:face.Capture)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::face::Person > persons_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_face_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_face_2eproto();
  #endif
  friend void protobuf_AssignDesc_face_2eproto();
  friend void protobuf_ShutdownFile_face_2eproto();

  void InitAsDefaultInstance();
  static Capture* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FileCode

// optional string checkCode = 1 [default = "f8a22cb2ea0b694692b2e41894e53cd8"];
inline void FileCode::clear_checkcode() {
  checkcode_.ClearToDefaultNoArena(_default_checkcode_);
}
inline const ::std::string& FileCode::checkcode() const {
  // @@protoc_insertion_point(field_get:face.FileCode.checkCode)
  return checkcode_.GetNoArena(_default_checkcode_);
}
inline void FileCode::set_checkcode(const ::std::string& value) {
  
  checkcode_.SetNoArena(_default_checkcode_, value);
  // @@protoc_insertion_point(field_set:face.FileCode.checkCode)
}
inline void FileCode::set_checkcode(const char* value) {
  
  checkcode_.SetNoArena(_default_checkcode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.FileCode.checkCode)
}
inline void FileCode::set_checkcode(const char* value, size_t size) {
  
  checkcode_.SetNoArena(_default_checkcode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.FileCode.checkCode)
}
inline ::std::string* FileCode::mutable_checkcode() {
  
  // @@protoc_insertion_point(field_mutable:face.FileCode.checkCode)
  return checkcode_.MutableNoArena(_default_checkcode_);
}
inline ::std::string* FileCode::release_checkcode() {
  // @@protoc_insertion_point(field_release:face.FileCode.checkCode)
  
  return checkcode_.ReleaseNoArena(_default_checkcode_);
}
inline void FileCode::set_allocated_checkcode(::std::string* checkcode) {
  if (checkcode != NULL) {
    
  } else {
    
  }
  checkcode_.SetAllocatedNoArena(_default_checkcode_, checkcode);
  // @@protoc_insertion_point(field_set_allocated:face.FileCode.checkCode)
}

// optional int32 version = 2 [default = 1];
inline void FileCode::clear_version() {
  version_ = 1;
}
inline ::google::protobuf::int32 FileCode::version() const {
  // @@protoc_insertion_point(field_get:face.FileCode.version)
  return version_;
}
inline void FileCode::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:face.FileCode.version)
}

// -------------------------------------------------------------------

// Attribute

// optional int32 type = 1;
inline void Attribute::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Attribute::type() const {
  // @@protoc_insertion_point(field_get:face.Attribute.type)
  return type_;
}
inline void Attribute::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:face.Attribute.type)
}

// optional int32 int_val = 2;
inline void Attribute::clear_int_val() {
  int_val_ = 0;
}
inline ::google::protobuf::int32 Attribute::int_val() const {
  // @@protoc_insertion_point(field_get:face.Attribute.int_val)
  return int_val_;
}
inline void Attribute::set_int_val(::google::protobuf::int32 value) {
  
  int_val_ = value;
  // @@protoc_insertion_point(field_set:face.Attribute.int_val)
}

// optional string str_val = 3;
inline void Attribute::clear_str_val() {
  str_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attribute::str_val() const {
  // @@protoc_insertion_point(field_get:face.Attribute.str_val)
  return str_val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_str_val(const ::std::string& value) {
  
  str_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Attribute.str_val)
}
inline void Attribute::set_str_val(const char* value) {
  
  str_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Attribute.str_val)
}
inline void Attribute::set_str_val(const char* value, size_t size) {
  
  str_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Attribute.str_val)
}
inline ::std::string* Attribute::mutable_str_val() {
  
  // @@protoc_insertion_point(field_mutable:face.Attribute.str_val)
  return str_val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attribute::release_str_val() {
  // @@protoc_insertion_point(field_release:face.Attribute.str_val)
  
  return str_val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_str_val(::std::string* str_val) {
  if (str_val != NULL) {
    
  } else {
    
  }
  str_val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_val);
  // @@protoc_insertion_point(field_set_allocated:face.Attribute.str_val)
}

// -------------------------------------------------------------------

// Point

// optional int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:face.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:face.Point.x)
}

// optional int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:face.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:face.Point.y)
}

// optional float score = 3;
inline void Point::clear_score() {
  score_ = 0;
}
inline float Point::score() const {
  // @@protoc_insertion_point(field_get:face.Point.score)
  return score_;
}
inline void Point::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:face.Point.score)
}

// -------------------------------------------------------------------

// Landmarks

// optional int32 point_num = 1;
inline void Landmarks::clear_point_num() {
  point_num_ = 0;
}
inline ::google::protobuf::int32 Landmarks::point_num() const {
  // @@protoc_insertion_point(field_get:face.Landmarks.point_num)
  return point_num_;
}
inline void Landmarks::set_point_num(::google::protobuf::int32 value) {
  
  point_num_ = value;
  // @@protoc_insertion_point(field_set:face.Landmarks.point_num)
}

// repeated .face.Point points = 2;
inline int Landmarks::points_size() const {
  return points_.size();
}
inline void Landmarks::clear_points() {
  points_.Clear();
}
inline const ::face::Point& Landmarks::points(int index) const {
  // @@protoc_insertion_point(field_get:face.Landmarks.points)
  return points_.Get(index);
}
inline ::face::Point* Landmarks::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:face.Landmarks.points)
  return points_.Mutable(index);
}
inline ::face::Point* Landmarks::add_points() {
  // @@protoc_insertion_point(field_add:face.Landmarks.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::face::Point >*
Landmarks::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:face.Landmarks.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::face::Point >&
Landmarks::points() const {
  // @@protoc_insertion_point(field_list:face.Landmarks.points)
  return points_;
}

// -------------------------------------------------------------------

// BBox

// optional int32 top = 1;
inline void BBox::clear_top() {
  top_ = 0;
}
inline ::google::protobuf::int32 BBox::top() const {
  // @@protoc_insertion_point(field_get:face.BBox.top)
  return top_;
}
inline void BBox::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:face.BBox.top)
}

// optional int32 left = 2;
inline void BBox::clear_left() {
  left_ = 0;
}
inline ::google::protobuf::int32 BBox::left() const {
  // @@protoc_insertion_point(field_get:face.BBox.left)
  return left_;
}
inline void BBox::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:face.BBox.left)
}

// optional int32 right = 3;
inline void BBox::clear_right() {
  right_ = 0;
}
inline ::google::protobuf::int32 BBox::right() const {
  // @@protoc_insertion_point(field_get:face.BBox.right)
  return right_;
}
inline void BBox::set_right(::google::protobuf::int32 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:face.BBox.right)
}

// optional int32 bottom = 4;
inline void BBox::clear_bottom() {
  bottom_ = 0;
}
inline ::google::protobuf::int32 BBox::bottom() const {
  // @@protoc_insertion_point(field_get:face.BBox.bottom)
  return bottom_;
}
inline void BBox::set_bottom(::google::protobuf::int32 value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:face.BBox.bottom)
}

// -------------------------------------------------------------------

// Target

// optional int32 type = 1;
inline void Target::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Target::type() const {
  // @@protoc_insertion_point(field_get:face.Target.type)
  return type_;
}
inline void Target::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:face.Target.type)
}

// optional int32 id = 2;
inline void Target::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Target::id() const {
  // @@protoc_insertion_point(field_get:face.Target.id)
  return id_;
}
inline void Target::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:face.Target.id)
}

// optional .face.BBox box = 3;
inline bool Target::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
inline void Target::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
inline const ::face::BBox& Target::box() const {
  // @@protoc_insertion_point(field_get:face.Target.box)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return box_ != NULL ? *box_ : *default_instance().box_;
#else
  return box_ != NULL ? *box_ : *default_instance_->box_;
#endif
}
inline ::face::BBox* Target::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::face::BBox;
  }
  // @@protoc_insertion_point(field_mutable:face.Target.box)
  return box_;
}
inline ::face::BBox* Target::release_box() {
  // @@protoc_insertion_point(field_release:face.Target.box)
  
  ::face::BBox* temp = box_;
  box_ = NULL;
  return temp;
}
inline void Target::set_allocated_box(::face::BBox* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.Target.box)
}

// repeated .face.Attribute attrs = 4;
inline int Target::attrs_size() const {
  return attrs_.size();
}
inline void Target::clear_attrs() {
  attrs_.Clear();
}
inline const ::face::Attribute& Target::attrs(int index) const {
  // @@protoc_insertion_point(field_get:face.Target.attrs)
  return attrs_.Get(index);
}
inline ::face::Attribute* Target::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:face.Target.attrs)
  return attrs_.Mutable(index);
}
inline ::face::Attribute* Target::add_attrs() {
  // @@protoc_insertion_point(field_add:face.Target.attrs)
  return attrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::face::Attribute >*
Target::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:face.Target.attrs)
  return &attrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::face::Attribute >&
Target::attrs() const {
  // @@protoc_insertion_point(field_list:face.Target.attrs)
  return attrs_;
}

// optional .face.Landmarks lmks = 5;
inline bool Target::has_lmks() const {
  return !_is_default_instance_ && lmks_ != NULL;
}
inline void Target::clear_lmks() {
  if (GetArenaNoVirtual() == NULL && lmks_ != NULL) delete lmks_;
  lmks_ = NULL;
}
inline const ::face::Landmarks& Target::lmks() const {
  // @@protoc_insertion_point(field_get:face.Target.lmks)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return lmks_ != NULL ? *lmks_ : *default_instance().lmks_;
#else
  return lmks_ != NULL ? *lmks_ : *default_instance_->lmks_;
#endif
}
inline ::face::Landmarks* Target::mutable_lmks() {
  
  if (lmks_ == NULL) {
    lmks_ = new ::face::Landmarks;
  }
  // @@protoc_insertion_point(field_mutable:face.Target.lmks)
  return lmks_;
}
inline ::face::Landmarks* Target::release_lmks() {
  // @@protoc_insertion_point(field_release:face.Target.lmks)
  
  ::face::Landmarks* temp = lmks_;
  lmks_ = NULL;
  return temp;
}
inline void Target::set_allocated_lmks(::face::Landmarks* lmks) {
  delete lmks_;
  lmks_ = lmks;
  if (lmks) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.Target.lmks)
}

// -------------------------------------------------------------------

// Result

// optional fixed64 timestamp = 1;
inline void Result::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Result::timestamp() const {
  // @@protoc_insertion_point(field_get:face.Result.timestamp)
  return timestamp_;
}
inline void Result::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:face.Result.timestamp)
}

// optional int32 frame_status = 2;
inline void Result::clear_frame_status() {
  frame_status_ = 0;
}
inline ::google::protobuf::int32 Result::frame_status() const {
  // @@protoc_insertion_point(field_get:face.Result.frame_status)
  return frame_status_;
}
inline void Result::set_frame_status(::google::protobuf::int32 value) {
  
  frame_status_ = value;
  // @@protoc_insertion_point(field_set:face.Result.frame_status)
}

// repeated .face.Target targets = 3;
inline int Result::targets_size() const {
  return targets_.size();
}
inline void Result::clear_targets() {
  targets_.Clear();
}
inline const ::face::Target& Result::targets(int index) const {
  // @@protoc_insertion_point(field_get:face.Result.targets)
  return targets_.Get(index);
}
inline ::face::Target* Result::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:face.Result.targets)
  return targets_.Mutable(index);
}
inline ::face::Target* Result::add_targets() {
  // @@protoc_insertion_point(field_add:face.Result.targets)
  return targets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::face::Target >*
Result::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:face.Result.targets)
  return &targets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::face::Target >&
Result::targets() const {
  // @@protoc_insertion_point(field_list:face.Result.targets)
  return targets_;
}

// -------------------------------------------------------------------

// FlowEvent

// optional string group_id = 1;
inline void FlowEvent::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowEvent::group_id() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowEvent::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.FlowEvent.group_id)
}
inline void FlowEvent::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.FlowEvent.group_id)
}
inline void FlowEvent::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.FlowEvent.group_id)
}
inline ::std::string* FlowEvent::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:face.FlowEvent.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowEvent::release_group_id() {
  // @@protoc_insertion_point(field_release:face.FlowEvent.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowEvent::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:face.FlowEvent.group_id)
}

// optional string extra = 2;
inline void FlowEvent::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowEvent::extra() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.extra)
  return extra_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowEvent::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.FlowEvent.extra)
}
inline void FlowEvent::set_extra(const char* value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.FlowEvent.extra)
}
inline void FlowEvent::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.FlowEvent.extra)
}
inline ::std::string* FlowEvent::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:face.FlowEvent.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowEvent::release_extra() {
  // @@protoc_insertion_point(field_release:face.FlowEvent.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowEvent::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:face.FlowEvent.extra)
}

// optional int64 event_time = 3;
inline void FlowEvent::clear_event_time() {
  event_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FlowEvent::event_time() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.event_time)
  return event_time_;
}
inline void FlowEvent::set_event_time(::google::protobuf::int64 value) {
  
  event_time_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.event_time)
}

// optional int64 send_time = 4;
inline void FlowEvent::clear_send_time() {
  send_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FlowEvent::send_time() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.send_time)
  return send_time_;
}
inline void FlowEvent::set_send_time(::google::protobuf::int64 value) {
  
  send_time_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.send_time)
}

// optional int32 line_id = 5;
inline void FlowEvent::clear_line_id() {
  line_id_ = 0;
}
inline ::google::protobuf::int32 FlowEvent::line_id() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.line_id)
  return line_id_;
}
inline void FlowEvent::set_line_id(::google::protobuf::int32 value) {
  
  line_id_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.line_id)
}

// optional int32 event_type = 6;
inline void FlowEvent::clear_event_type() {
  event_type_ = 0;
}
inline ::google::protobuf::int32 FlowEvent::event_type() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.event_type)
  return event_type_;
}
inline void FlowEvent::set_event_type(::google::protobuf::int32 value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.event_type)
}

// optional int32 msg_type = 7;
inline void FlowEvent::clear_msg_type() {
  msg_type_ = 0;
}
inline ::google::protobuf::int32 FlowEvent::msg_type() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.msg_type)
  return msg_type_;
}
inline void FlowEvent::set_msg_type(::google::protobuf::int32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.msg_type)
}

// optional int32 age = 8;
inline void FlowEvent::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 FlowEvent::age() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.age)
  return age_;
}
inline void FlowEvent::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.age)
}

// optional int32 gender = 9;
inline void FlowEvent::clear_gender() {
  gender_ = 0;
}
inline ::google::protobuf::int32 FlowEvent::gender() const {
  // @@protoc_insertion_point(field_get:face.FlowEvent.gender)
  return gender_;
}
inline void FlowEvent::set_gender(::google::protobuf::int32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEvent.gender)
}

// -------------------------------------------------------------------

// FlowEventBucket

// optional int32 num_0_6 = 1;
inline void FlowEventBucket::clear_num_0_6() {
  num_0_6_ = 0;
}
inline ::google::protobuf::int32 FlowEventBucket::num_0_6() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_0_6)
  return num_0_6_;
}
inline void FlowEventBucket::set_num_0_6(::google::protobuf::int32 value) {
  
  num_0_6_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_0_6)
}

// optional int32 num_7_12 = 2;
inline void FlowEventBucket::clear_num_7_12() {
  num_7_12_ = 0;
}
inline ::google::protobuf::int32 FlowEventBucket::num_7_12() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_7_12)
  return num_7_12_;
}
inline void FlowEventBucket::set_num_7_12(::google::protobuf::int32 value) {
  
  num_7_12_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_7_12)
}

// optional int32 num_13_18 = 3;
inline void FlowEventBucket::clear_num_13_18() {
  num_13_18_ = 0;
}
inline ::google::protobuf::int32 FlowEventBucket::num_13_18() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_13_18)
  return num_13_18_;
}
inline void FlowEventBucket::set_num_13_18(::google::protobuf::int32 value) {
  
  num_13_18_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_13_18)
}

// optional int32 num_19_28 = 4;
inline void FlowEventBucket::clear_num_19_28() {
  num_19_28_ = 0;
}
inline ::google::protobuf::int32 FlowEventBucket::num_19_28() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_19_28)
  return num_19_28_;
}
inline void FlowEventBucket::set_num_19_28(::google::protobuf::int32 value) {
  
  num_19_28_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_19_28)
}

// optional int32 num_29_35 = 5;
inline void FlowEventBucket::clear_num_29_35() {
  num_29_35_ = 0;
}
inline ::google::protobuf::int32 FlowEventBucket::num_29_35() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_29_35)
  return num_29_35_;
}
inline void FlowEventBucket::set_num_29_35(::google::protobuf::int32 value) {
  
  num_29_35_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_29_35)
}

// optional int32 num_36_45 = 6;
inline void FlowEventBucket::clear_num_36_45() {
  num_36_45_ = 0;
}
inline ::google::protobuf::int32 FlowEventBucket::num_36_45() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_36_45)
  return num_36_45_;
}
inline void FlowEventBucket::set_num_36_45(::google::protobuf::int32 value) {
  
  num_36_45_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_36_45)
}

// optional int32 num_46_55 = 7;
inline void FlowEventBucket::clear_num_46_55() {
  num_46_55_ = 0;
}
inline ::google::protobuf::int32 FlowEventBucket::num_46_55() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_46_55)
  return num_46_55_;
}
inline void FlowEventBucket::set_num_46_55(::google::protobuf::int32 value) {
  
  num_46_55_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_46_55)
}

// optional int32 num_gt_55 = 8;
inline void FlowEventBucket::clear_num_gt_55() {
  num_gt_55_ = 0;
}
inline ::google::protobuf::int32 FlowEventBucket::num_gt_55() const {
  // @@protoc_insertion_point(field_get:face.FlowEventBucket.num_gt_55)
  return num_gt_55_;
}
inline void FlowEventBucket::set_num_gt_55(::google::protobuf::int32 value) {
  
  num_gt_55_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventBucket.num_gt_55)
}

// -------------------------------------------------------------------

// FlowEventStats

// optional string group_id = 1;
inline void FlowEventStats::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowEventStats::group_id() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.group_id)
  return group_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowEventStats::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.FlowEventStats.group_id)
}
inline void FlowEventStats::set_group_id(const char* value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.FlowEventStats.group_id)
}
inline void FlowEventStats::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.FlowEventStats.group_id)
}
inline ::std::string* FlowEventStats::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowEventStats::release_group_id() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowEventStats::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.group_id)
}

// optional int32 person_total = 2;
inline void FlowEventStats::clear_person_total() {
  person_total_ = 0;
}
inline ::google::protobuf::int32 FlowEventStats::person_total() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.person_total)
  return person_total_;
}
inline void FlowEventStats::set_person_total(::google::protobuf::int32 value) {
  
  person_total_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.person_total)
}

// optional int64 timestamp = 3;
inline void FlowEventStats::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FlowEventStats::timestamp() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.timestamp)
  return timestamp_;
}
inline void FlowEventStats::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.timestamp)
}

// optional int64 interval = 4;
inline void FlowEventStats::clear_interval() {
  interval_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FlowEventStats::interval() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.interval)
  return interval_;
}
inline void FlowEventStats::set_interval(::google::protobuf::int64 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.interval)
}

// optional int32 front_num = 5;
inline void FlowEventStats::clear_front_num() {
  front_num_ = 0;
}
inline ::google::protobuf::int32 FlowEventStats::front_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.front_num)
  return front_num_;
}
inline void FlowEventStats::set_front_num(::google::protobuf::int32 value) {
  
  front_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.front_num)
}

// optional int32 in_num = 6;
inline void FlowEventStats::clear_in_num() {
  in_num_ = 0;
}
inline ::google::protobuf::int32 FlowEventStats::in_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_num)
  return in_num_;
}
inline void FlowEventStats::set_in_num(::google::protobuf::int32 value) {
  
  in_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.in_num)
}

// optional int32 in_female_num = 7;
inline void FlowEventStats::clear_in_female_num() {
  in_female_num_ = 0;
}
inline ::google::protobuf::int32 FlowEventStats::in_female_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_female_num)
  return in_female_num_;
}
inline void FlowEventStats::set_in_female_num(::google::protobuf::int32 value) {
  
  in_female_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.in_female_num)
}

// optional int32 in_male_num = 8;
inline void FlowEventStats::clear_in_male_num() {
  in_male_num_ = 0;
}
inline ::google::protobuf::int32 FlowEventStats::in_male_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_male_num)
  return in_male_num_;
}
inline void FlowEventStats::set_in_male_num(::google::protobuf::int32 value) {
  
  in_male_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.in_male_num)
}

// optional int32 out_num = 9;
inline void FlowEventStats::clear_out_num() {
  out_num_ = 0;
}
inline ::google::protobuf::int32 FlowEventStats::out_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_num)
  return out_num_;
}
inline void FlowEventStats::set_out_num(::google::protobuf::int32 value) {
  
  out_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.out_num)
}

// optional int32 out_female_num = 10;
inline void FlowEventStats::clear_out_female_num() {
  out_female_num_ = 0;
}
inline ::google::protobuf::int32 FlowEventStats::out_female_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_female_num)
  return out_female_num_;
}
inline void FlowEventStats::set_out_female_num(::google::protobuf::int32 value) {
  
  out_female_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.out_female_num)
}

// optional int32 out_male_num = 11;
inline void FlowEventStats::clear_out_male_num() {
  out_male_num_ = 0;
}
inline ::google::protobuf::int32 FlowEventStats::out_male_num() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_male_num)
  return out_male_num_;
}
inline void FlowEventStats::set_out_male_num(::google::protobuf::int32 value) {
  
  out_male_num_ = value;
  // @@protoc_insertion_point(field_set:face.FlowEventStats.out_male_num)
}

// optional .face.FlowEventBucket in_male_bucket = 12;
inline bool FlowEventStats::has_in_male_bucket() const {
  return !_is_default_instance_ && in_male_bucket_ != NULL;
}
inline void FlowEventStats::clear_in_male_bucket() {
  if (GetArenaNoVirtual() == NULL && in_male_bucket_ != NULL) delete in_male_bucket_;
  in_male_bucket_ = NULL;
}
inline const ::face::FlowEventBucket& FlowEventStats::in_male_bucket() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_male_bucket)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return in_male_bucket_ != NULL ? *in_male_bucket_ : *default_instance().in_male_bucket_;
#else
  return in_male_bucket_ != NULL ? *in_male_bucket_ : *default_instance_->in_male_bucket_;
#endif
}
inline ::face::FlowEventBucket* FlowEventStats::mutable_in_male_bucket() {
  
  if (in_male_bucket_ == NULL) {
    in_male_bucket_ = new ::face::FlowEventBucket;
  }
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.in_male_bucket)
  return in_male_bucket_;
}
inline ::face::FlowEventBucket* FlowEventStats::release_in_male_bucket() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.in_male_bucket)
  
  ::face::FlowEventBucket* temp = in_male_bucket_;
  in_male_bucket_ = NULL;
  return temp;
}
inline void FlowEventStats::set_allocated_in_male_bucket(::face::FlowEventBucket* in_male_bucket) {
  delete in_male_bucket_;
  in_male_bucket_ = in_male_bucket;
  if (in_male_bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.in_male_bucket)
}

// optional .face.FlowEventBucket in_female_bucket = 13;
inline bool FlowEventStats::has_in_female_bucket() const {
  return !_is_default_instance_ && in_female_bucket_ != NULL;
}
inline void FlowEventStats::clear_in_female_bucket() {
  if (GetArenaNoVirtual() == NULL && in_female_bucket_ != NULL) delete in_female_bucket_;
  in_female_bucket_ = NULL;
}
inline const ::face::FlowEventBucket& FlowEventStats::in_female_bucket() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.in_female_bucket)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return in_female_bucket_ != NULL ? *in_female_bucket_ : *default_instance().in_female_bucket_;
#else
  return in_female_bucket_ != NULL ? *in_female_bucket_ : *default_instance_->in_female_bucket_;
#endif
}
inline ::face::FlowEventBucket* FlowEventStats::mutable_in_female_bucket() {
  
  if (in_female_bucket_ == NULL) {
    in_female_bucket_ = new ::face::FlowEventBucket;
  }
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.in_female_bucket)
  return in_female_bucket_;
}
inline ::face::FlowEventBucket* FlowEventStats::release_in_female_bucket() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.in_female_bucket)
  
  ::face::FlowEventBucket* temp = in_female_bucket_;
  in_female_bucket_ = NULL;
  return temp;
}
inline void FlowEventStats::set_allocated_in_female_bucket(::face::FlowEventBucket* in_female_bucket) {
  delete in_female_bucket_;
  in_female_bucket_ = in_female_bucket;
  if (in_female_bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.in_female_bucket)
}

// optional .face.FlowEventBucket out_male_bucket = 14;
inline bool FlowEventStats::has_out_male_bucket() const {
  return !_is_default_instance_ && out_male_bucket_ != NULL;
}
inline void FlowEventStats::clear_out_male_bucket() {
  if (GetArenaNoVirtual() == NULL && out_male_bucket_ != NULL) delete out_male_bucket_;
  out_male_bucket_ = NULL;
}
inline const ::face::FlowEventBucket& FlowEventStats::out_male_bucket() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_male_bucket)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return out_male_bucket_ != NULL ? *out_male_bucket_ : *default_instance().out_male_bucket_;
#else
  return out_male_bucket_ != NULL ? *out_male_bucket_ : *default_instance_->out_male_bucket_;
#endif
}
inline ::face::FlowEventBucket* FlowEventStats::mutable_out_male_bucket() {
  
  if (out_male_bucket_ == NULL) {
    out_male_bucket_ = new ::face::FlowEventBucket;
  }
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.out_male_bucket)
  return out_male_bucket_;
}
inline ::face::FlowEventBucket* FlowEventStats::release_out_male_bucket() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.out_male_bucket)
  
  ::face::FlowEventBucket* temp = out_male_bucket_;
  out_male_bucket_ = NULL;
  return temp;
}
inline void FlowEventStats::set_allocated_out_male_bucket(::face::FlowEventBucket* out_male_bucket) {
  delete out_male_bucket_;
  out_male_bucket_ = out_male_bucket;
  if (out_male_bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.out_male_bucket)
}

// optional .face.FlowEventBucket out_female_bucket = 15;
inline bool FlowEventStats::has_out_female_bucket() const {
  return !_is_default_instance_ && out_female_bucket_ != NULL;
}
inline void FlowEventStats::clear_out_female_bucket() {
  if (GetArenaNoVirtual() == NULL && out_female_bucket_ != NULL) delete out_female_bucket_;
  out_female_bucket_ = NULL;
}
inline const ::face::FlowEventBucket& FlowEventStats::out_female_bucket() const {
  // @@protoc_insertion_point(field_get:face.FlowEventStats.out_female_bucket)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return out_female_bucket_ != NULL ? *out_female_bucket_ : *default_instance().out_female_bucket_;
#else
  return out_female_bucket_ != NULL ? *out_female_bucket_ : *default_instance_->out_female_bucket_;
#endif
}
inline ::face::FlowEventBucket* FlowEventStats::mutable_out_female_bucket() {
  
  if (out_female_bucket_ == NULL) {
    out_female_bucket_ = new ::face::FlowEventBucket;
  }
  // @@protoc_insertion_point(field_mutable:face.FlowEventStats.out_female_bucket)
  return out_female_bucket_;
}
inline ::face::FlowEventBucket* FlowEventStats::release_out_female_bucket() {
  // @@protoc_insertion_point(field_release:face.FlowEventStats.out_female_bucket)
  
  ::face::FlowEventBucket* temp = out_female_bucket_;
  out_female_bucket_ = NULL;
  return temp;
}
inline void FlowEventStats::set_allocated_out_female_bucket(::face::FlowEventBucket* out_female_bucket) {
  delete out_female_bucket_;
  out_female_bucket_ = out_female_bucket;
  if (out_female_bucket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.FlowEventStats.out_female_bucket)
}

// -------------------------------------------------------------------

// Feature

// optional bytes feat_info = 1;
inline void Feature::clear_feat_info() {
  feat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::feat_info() const {
  // @@protoc_insertion_point(field_get:face.Feature.feat_info)
  return feat_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_feat_info(const ::std::string& value) {
  
  feat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.feat_info)
}
inline void Feature::set_feat_info(const char* value) {
  
  feat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.feat_info)
}
inline void Feature::set_feat_info(const void* value, size_t size) {
  
  feat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.feat_info)
}
inline ::std::string* Feature::mutable_feat_info() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.feat_info)
  return feat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_feat_info() {
  // @@protoc_insertion_point(field_release:face.Feature.feat_info)
  
  return feat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_feat_info(::std::string* feat_info) {
  if (feat_info != NULL) {
    
  } else {
    
  }
  feat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feat_info);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.feat_info)
}

// optional string matched_id = 2;
inline void Feature::clear_matched_id() {
  matched_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::matched_id() const {
  // @@protoc_insertion_point(field_get:face.Feature.matched_id)
  return matched_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_matched_id(const ::std::string& value) {
  
  matched_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.matched_id)
}
inline void Feature::set_matched_id(const char* value) {
  
  matched_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.matched_id)
}
inline void Feature::set_matched_id(const char* value, size_t size) {
  
  matched_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.matched_id)
}
inline ::std::string* Feature::mutable_matched_id() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.matched_id)
  return matched_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_matched_id() {
  // @@protoc_insertion_point(field_release:face.Feature.matched_id)
  
  return matched_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_matched_id(::std::string* matched_id) {
  if (matched_id != NULL) {
    
  } else {
    
  }
  matched_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matched_id);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.matched_id)
}

// optional float matched_rate = 3;
inline void Feature::clear_matched_rate() {
  matched_rate_ = 0;
}
inline float Feature::matched_rate() const {
  // @@protoc_insertion_point(field_get:face.Feature.matched_rate)
  return matched_rate_;
}
inline void Feature::set_matched_rate(float value) {
  
  matched_rate_ = value;
  // @@protoc_insertion_point(field_set:face.Feature.matched_rate)
}

// optional string db_id = 4;
inline void Feature::clear_db_id() {
  db_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::db_id() const {
  // @@protoc_insertion_point(field_get:face.Feature.db_id)
  return db_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_db_id(const ::std::string& value) {
  
  db_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.db_id)
}
inline void Feature::set_db_id(const char* value) {
  
  db_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.db_id)
}
inline void Feature::set_db_id(const char* value, size_t size) {
  
  db_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.db_id)
}
inline ::std::string* Feature::mutable_db_id() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.db_id)
  return db_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_db_id() {
  // @@protoc_insertion_point(field_release:face.Feature.db_id)
  
  return db_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_db_id(::std::string* db_id) {
  if (db_id != NULL) {
    
  } else {
    
  }
  db_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_id);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.db_id)
}

// optional string name = 5;
inline void Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:face.Feature.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.name)
}
inline void Feature::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.name)
}
inline void Feature::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.name)
}
inline ::std::string* Feature::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:face.Feature.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.name)
}

// optional string url = 6;
inline void Feature::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::url() const {
  // @@protoc_insertion_point(field_get:face.Feature.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.url)
}
inline void Feature::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.url)
}
inline void Feature::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.url)
}
inline ::std::string* Feature::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_url() {
  // @@protoc_insertion_point(field_release:face.Feature.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.url)
}

// optional string matched_img = 7;
inline void Feature::clear_matched_img() {
  matched_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::matched_img() const {
  // @@protoc_insertion_point(field_get:face.Feature.matched_img)
  return matched_img_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_matched_img(const ::std::string& value) {
  
  matched_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.matched_img)
}
inline void Feature::set_matched_img(const char* value) {
  
  matched_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.matched_img)
}
inline void Feature::set_matched_img(const char* value, size_t size) {
  
  matched_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.matched_img)
}
inline ::std::string* Feature::mutable_matched_img() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.matched_img)
  return matched_img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_matched_img() {
  // @@protoc_insertion_point(field_release:face.Feature.matched_img)
  
  return matched_img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_matched_img(::std::string* matched_img) {
  if (matched_img != NULL) {
    
  } else {
    
  }
  matched_img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matched_img);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.matched_img)
}

// optional string ext1 = 8;
inline void Feature::clear_ext1() {
  ext1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::ext1() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext1)
  return ext1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_ext1(const ::std::string& value) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext1)
}
inline void Feature::set_ext1(const char* value) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext1)
}
inline void Feature::set_ext1(const char* value, size_t size) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext1)
}
inline ::std::string* Feature::mutable_ext1() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext1)
  return ext1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_ext1() {
  // @@protoc_insertion_point(field_release:face.Feature.ext1)
  
  return ext1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_ext1(::std::string* ext1) {
  if (ext1 != NULL) {
    
  } else {
    
  }
  ext1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext1);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext1)
}

// optional string ext2 = 9;
inline void Feature::clear_ext2() {
  ext2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::ext2() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext2)
  return ext2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_ext2(const ::std::string& value) {
  
  ext2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext2)
}
inline void Feature::set_ext2(const char* value) {
  
  ext2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext2)
}
inline void Feature::set_ext2(const char* value, size_t size) {
  
  ext2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext2)
}
inline ::std::string* Feature::mutable_ext2() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext2)
  return ext2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_ext2() {
  // @@protoc_insertion_point(field_release:face.Feature.ext2)
  
  return ext2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_ext2(::std::string* ext2) {
  if (ext2 != NULL) {
    
  } else {
    
  }
  ext2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext2);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext2)
}

// optional string ext3 = 10;
inline void Feature::clear_ext3() {
  ext3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::ext3() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext3)
  return ext3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_ext3(const ::std::string& value) {
  
  ext3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext3)
}
inline void Feature::set_ext3(const char* value) {
  
  ext3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext3)
}
inline void Feature::set_ext3(const char* value, size_t size) {
  
  ext3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext3)
}
inline ::std::string* Feature::mutable_ext3() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext3)
  return ext3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_ext3() {
  // @@protoc_insertion_point(field_release:face.Feature.ext3)
  
  return ext3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_ext3(::std::string* ext3) {
  if (ext3 != NULL) {
    
  } else {
    
  }
  ext3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext3);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext3)
}

// optional string ext4 = 11;
inline void Feature::clear_ext4() {
  ext4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::ext4() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext4)
  return ext4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_ext4(const ::std::string& value) {
  
  ext4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext4)
}
inline void Feature::set_ext4(const char* value) {
  
  ext4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext4)
}
inline void Feature::set_ext4(const char* value, size_t size) {
  
  ext4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext4)
}
inline ::std::string* Feature::mutable_ext4() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext4)
  return ext4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_ext4() {
  // @@protoc_insertion_point(field_release:face.Feature.ext4)
  
  return ext4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_ext4(::std::string* ext4) {
  if (ext4 != NULL) {
    
  } else {
    
  }
  ext4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext4);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext4)
}

// optional string ext5 = 12;
inline void Feature::clear_ext5() {
  ext5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::ext5() const {
  // @@protoc_insertion_point(field_get:face.Feature.ext5)
  return ext5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_ext5(const ::std::string& value) {
  
  ext5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Feature.ext5)
}
inline void Feature::set_ext5(const char* value) {
  
  ext5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Feature.ext5)
}
inline void Feature::set_ext5(const char* value, size_t size) {
  
  ext5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Feature.ext5)
}
inline ::std::string* Feature::mutable_ext5() {
  
  // @@protoc_insertion_point(field_mutable:face.Feature.ext5)
  return ext5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_ext5() {
  // @@protoc_insertion_point(field_release:face.Feature.ext5)
  
  return ext5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_ext5(::std::string* ext5) {
  if (ext5 != NULL) {
    
  } else {
    
  }
  ext5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext5);
  // @@protoc_insertion_point(field_set_allocated:face.Feature.ext5)
}

// -------------------------------------------------------------------

// Face

// optional fixed64 timestamp = 1;
inline void Face::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Face::timestamp() const {
  // @@protoc_insertion_point(field_get:face.Face.timestamp)
  return timestamp_;
}
inline void Face::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:face.Face.timestamp)
}

// repeated int32 character_value = 2 [packed = true];
inline int Face::character_value_size() const {
  return character_value_.size();
}
inline void Face::clear_character_value() {
  character_value_.Clear();
}
inline ::google::protobuf::int32 Face::character_value(int index) const {
  // @@protoc_insertion_point(field_get:face.Face.character_value)
  return character_value_.Get(index);
}
inline void Face::set_character_value(int index, ::google::protobuf::int32 value) {
  character_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:face.Face.character_value)
}
inline void Face::add_character_value(::google::protobuf::int32 value) {
  character_value_.Add(value);
  // @@protoc_insertion_point(field_add:face.Face.character_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Face::character_value() const {
  // @@protoc_insertion_point(field_list:face.Face.character_value)
  return character_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Face::mutable_character_value() {
  // @@protoc_insertion_point(field_mutable_list:face.Face.character_value)
  return &character_value_;
}

// optional bytes snapshot = 3;
inline void Face::clear_snapshot() {
  snapshot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Face::snapshot() const {
  // @@protoc_insertion_point(field_get:face.Face.snapshot)
  return snapshot_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_snapshot(const ::std::string& value) {
  
  snapshot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Face.snapshot)
}
inline void Face::set_snapshot(const char* value) {
  
  snapshot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Face.snapshot)
}
inline void Face::set_snapshot(const void* value, size_t size) {
  
  snapshot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Face.snapshot)
}
inline ::std::string* Face::mutable_snapshot() {
  
  // @@protoc_insertion_point(field_mutable:face.Face.snapshot)
  return snapshot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Face::release_snapshot() {
  // @@protoc_insertion_point(field_release:face.Face.snapshot)
  
  return snapshot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot != NULL) {
    
  } else {
    
  }
  snapshot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot);
  // @@protoc_insertion_point(field_set_allocated:face.Face.snapshot)
}

// optional string imgtype = 4;
inline void Face::clear_imgtype() {
  imgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Face::imgtype() const {
  // @@protoc_insertion_point(field_get:face.Face.imgtype)
  return imgtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_imgtype(const ::std::string& value) {
  
  imgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:face.Face.imgtype)
}
inline void Face::set_imgtype(const char* value) {
  
  imgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:face.Face.imgtype)
}
inline void Face::set_imgtype(const char* value, size_t size) {
  
  imgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:face.Face.imgtype)
}
inline ::std::string* Face::mutable_imgtype() {
  
  // @@protoc_insertion_point(field_mutable:face.Face.imgtype)
  return imgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Face::release_imgtype() {
  // @@protoc_insertion_point(field_release:face.Face.imgtype)
  
  return imgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Face::set_allocated_imgtype(::std::string* imgtype) {
  if (imgtype != NULL) {
    
  } else {
    
  }
  imgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgtype);
  // @@protoc_insertion_point(field_set_allocated:face.Face.imgtype)
}

// optional .face.BBox pic_box = 5;
inline bool Face::has_pic_box() const {
  return !_is_default_instance_ && pic_box_ != NULL;
}
inline void Face::clear_pic_box() {
  if (GetArenaNoVirtual() == NULL && pic_box_ != NULL) delete pic_box_;
  pic_box_ = NULL;
}
inline const ::face::BBox& Face::pic_box() const {
  // @@protoc_insertion_point(field_get:face.Face.pic_box)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pic_box_ != NULL ? *pic_box_ : *default_instance().pic_box_;
#else
  return pic_box_ != NULL ? *pic_box_ : *default_instance_->pic_box_;
#endif
}
inline ::face::BBox* Face::mutable_pic_box() {
  
  if (pic_box_ == NULL) {
    pic_box_ = new ::face::BBox;
  }
  // @@protoc_insertion_point(field_mutable:face.Face.pic_box)
  return pic_box_;
}
inline ::face::BBox* Face::release_pic_box() {
  // @@protoc_insertion_point(field_release:face.Face.pic_box)
  
  ::face::BBox* temp = pic_box_;
  pic_box_ = NULL;
  return temp;
}
inline void Face::set_allocated_pic_box(::face::BBox* pic_box) {
  delete pic_box_;
  pic_box_ = pic_box;
  if (pic_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.Face.pic_box)
}

// optional .face.BBox face_box = 6;
inline bool Face::has_face_box() const {
  return !_is_default_instance_ && face_box_ != NULL;
}
inline void Face::clear_face_box() {
  if (GetArenaNoVirtual() == NULL && face_box_ != NULL) delete face_box_;
  face_box_ = NULL;
}
inline const ::face::BBox& Face::face_box() const {
  // @@protoc_insertion_point(field_get:face.Face.face_box)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return face_box_ != NULL ? *face_box_ : *default_instance().face_box_;
#else
  return face_box_ != NULL ? *face_box_ : *default_instance_->face_box_;
#endif
}
inline ::face::BBox* Face::mutable_face_box() {
  
  if (face_box_ == NULL) {
    face_box_ = new ::face::BBox;
  }
  // @@protoc_insertion_point(field_mutable:face.Face.face_box)
  return face_box_;
}
inline ::face::BBox* Face::release_face_box() {
  // @@protoc_insertion_point(field_release:face.Face.face_box)
  
  ::face::BBox* temp = face_box_;
  face_box_ = NULL;
  return temp;
}
inline void Face::set_allocated_face_box(::face::BBox* face_box) {
  delete face_box_;
  face_box_ = face_box;
  if (face_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:face.Face.face_box)
}

// repeated .face.Attribute attrs = 7;
inline int Face::attrs_size() const {
  return attrs_.size();
}
inline void Face::clear_attrs() {
  attrs_.Clear();
}
inline const ::face::Attribute& Face::attrs(int index) const {
  // @@protoc_insertion_point(field_get:face.Face.attrs)
  return attrs_.Get(index);
}
inline ::face::Attribute* Face::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:face.Face.attrs)
  return attrs_.Mutable(index);
}
inline ::face::Attribute* Face::add_attrs() {
  // @@protoc_insertion_point(field_add:face.Face.attrs)
  return attrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::face::Attribute >*
Face::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:face.Face.attrs)
  return &attrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::face::Attribute >&
Face::attrs() const {
  // @@protoc_insertion_point(field_list:face.Face.attrs)
  return attrs_;
}

// -------------------------------------------------------------------

// Person

// repeated int32 track_id = 1;
inline int Person::track_id_size() const {
  return track_id_.size();
}
inline void Person::clear_track_id() {
  track_id_.Clear();
}
inline ::google::protobuf::int32 Person::track_id(int index) const {
  // @@protoc_insertion_point(field_get:face.Person.track_id)
  return track_id_.Get(index);
}
inline void Person::set_track_id(int index, ::google::protobuf::int32 value) {
  track_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:face.Person.track_id)
}
inline void Person::add_track_id(::google::protobuf::int32 value) {
  track_id_.Add(value);
  // @@protoc_insertion_point(field_add:face.Person.track_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Person::track_id() const {
  // @@protoc_insertion_point(field_list:face.Person.track_id)
  return track_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Person::mutable_track_id() {
  // @@protoc_insertion_point(field_mutable_list:face.Person.track_id)
  return &track_id_;
}

// repeated .face.Face faces = 2;
inline int Person::faces_size() const {
  return faces_.size();
}
inline void Person::clear_faces() {
  faces_.Clear();
}
inline const ::face::Face& Person::faces(int index) const {
  // @@protoc_insertion_point(field_get:face.Person.faces)
  return faces_.Get(index);
}
inline ::face::Face* Person::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:face.Person.faces)
  return faces_.Mutable(index);
}
inline ::face::Face* Person::add_faces() {
  // @@protoc_insertion_point(field_add:face.Person.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::face::Face >*
Person::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:face.Person.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::face::Face >&
Person::faces() const {
  // @@protoc_insertion_point(field_list:face.Person.faces)
  return faces_;
}

// repeated .face.Feature features = 3;
inline int Person::features_size() const {
  return features_.size();
}
inline void Person::clear_features() {
  features_.Clear();
}
inline const ::face::Feature& Person::features(int index) const {
  // @@protoc_insertion_point(field_get:face.Person.features)
  return features_.Get(index);
}
inline ::face::Feature* Person::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:face.Person.features)
  return features_.Mutable(index);
}
inline ::face::Feature* Person::add_features() {
  // @@protoc_insertion_point(field_add:face.Person.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::face::Feature >*
Person::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:face.Person.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::face::Feature >&
Person::features() const {
  // @@protoc_insertion_point(field_list:face.Person.features)
  return features_;
}

// repeated .face.FlowEvent events = 4;
inline int Person::events_size() const {
  return events_.size();
}
inline void Person::clear_events() {
  events_.Clear();
}
inline const ::face::FlowEvent& Person::events(int index) const {
  // @@protoc_insertion_point(field_get:face.Person.events)
  return events_.Get(index);
}
inline ::face::FlowEvent* Person::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:face.Person.events)
  return events_.Mutable(index);
}
inline ::face::FlowEvent* Person::add_events() {
  // @@protoc_insertion_point(field_add:face.Person.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::face::FlowEvent >*
Person::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:face.Person.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::face::FlowEvent >&
Person::events() const {
  // @@protoc_insertion_point(field_list:face.Person.events)
  return events_;
}

// -------------------------------------------------------------------

// Capture

// repeated .face.Person persons = 1;
inline int Capture::persons_size() const {
  return persons_.size();
}
inline void Capture::clear_persons() {
  persons_.Clear();
}
inline const ::face::Person& Capture::persons(int index) const {
  // @@protoc_insertion_point(field_get:face.Capture.persons)
  return persons_.Get(index);
}
inline ::face::Person* Capture::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:face.Capture.persons)
  return persons_.Mutable(index);
}
inline ::face::Person* Capture::add_persons() {
  // @@protoc_insertion_point(field_add:face.Capture.persons)
  return persons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::face::Person >*
Capture::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:face.Capture.persons)
  return &persons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::face::Person >&
Capture::persons() const {
  // @@protoc_insertion_point(field_list:face.Capture.persons)
  return persons_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace face

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::face::HobotMediaType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_face_2eproto__INCLUDED
